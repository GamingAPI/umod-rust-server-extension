/* 
 * GamingEventApi API
 *
 * GamingEventApi API for the rust server
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jonas-lt@live.dk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Hit
    /// </summary>
    [DataContract]
    public partial class Hit :  IEquatable<Hit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Hit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Hit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Hit" /> class.
        /// </summary>
        /// <param name="attacker">The attacker&#39;s steamID64, must be 17 chars long. (required).</param>
        /// <param name="victim">The attacker&#39;s steamID64, must be 17 chars long. (required).</param>
        /// <param name="hitTimestamp">hitTimestamp (required).</param>
        /// <param name="hitDamage">hitDamage (required).</param>
        /// <param name="hitDistance">hitDistance.</param>
        /// <param name="hitAreaId">1&#x3D;\&quot;Head\&quot;, 2&#x3D;\&quot;Chest\&quot;, 4&#x3D;\&quot;Stomach\&quot;, 8&#x3D;\&quot;Arm\&quot;, 16&#x3D;\&quot;Hand\&quot;, 32&#x3D;\&quot;Leg\&quot;, 64&#x3D;\&quot;Foot\&quot;, -1&#x3D;\&quot;Everywhere\&quot; (required).</param>
        /// <param name="attackerActiveItem">attackerActiveItem (required).</param>
        /// <param name="victimActiveItem">victimActiveItem (required).</param>
        /// <param name="attackerPosition">attackerPosition (required).</param>
        /// <param name="victimPosition">victimPosition (required).</param>
        public Hit(string attacker = default(string), string victim = default(string), DateTime hitTimestamp = default(DateTime), decimal hitDamage = default(decimal), decimal hitDistance = default(decimal), int hitAreaId = default(int), HitAttackerActiveItem attackerActiveItem = default(HitAttackerActiveItem), HitAttackerActiveItem victimActiveItem = default(HitAttackerActiveItem), PlayerPosition attackerPosition = default(PlayerPosition), PlayerPosition victimPosition = default(PlayerPosition))
        {
            // to ensure "attacker" is required (not null)
            if (attacker == null)
            {
                throw new InvalidDataException("attacker is a required property for Hit and cannot be null");
            }
            else
            {
                this.Attacker = attacker;
            }
            
            // to ensure "victim" is required (not null)
            if (victim == null)
            {
                throw new InvalidDataException("victim is a required property for Hit and cannot be null");
            }
            else
            {
                this.Victim = victim;
            }
            
            // to ensure "hitTimestamp" is required (not null)
            if (hitTimestamp == null)
            {
                throw new InvalidDataException("hitTimestamp is a required property for Hit and cannot be null");
            }
            else
            {
                this.HitTimestamp = hitTimestamp;
            }
            
            // to ensure "hitDamage" is required (not null)
            if (hitDamage == null)
            {
                throw new InvalidDataException("hitDamage is a required property for Hit and cannot be null");
            }
            else
            {
                this.HitDamage = hitDamage;
            }
            
            // to ensure "hitAreaId" is required (not null)
            if (hitAreaId == null)
            {
                throw new InvalidDataException("hitAreaId is a required property for Hit and cannot be null");
            }
            else
            {
                this.HitAreaId = hitAreaId;
            }
            
            // to ensure "attackerActiveItem" is required (not null)
            if (attackerActiveItem == null)
            {
                throw new InvalidDataException("attackerActiveItem is a required property for Hit and cannot be null");
            }
            else
            {
                this.AttackerActiveItem = attackerActiveItem;
            }
            
            // to ensure "victimActiveItem" is required (not null)
            if (victimActiveItem == null)
            {
                throw new InvalidDataException("victimActiveItem is a required property for Hit and cannot be null");
            }
            else
            {
                this.VictimActiveItem = victimActiveItem;
            }
            
            // to ensure "attackerPosition" is required (not null)
            if (attackerPosition == null)
            {
                throw new InvalidDataException("attackerPosition is a required property for Hit and cannot be null");
            }
            else
            {
                this.AttackerPosition = attackerPosition;
            }
            
            // to ensure "victimPosition" is required (not null)
            if (victimPosition == null)
            {
                throw new InvalidDataException("victimPosition is a required property for Hit and cannot be null");
            }
            else
            {
                this.VictimPosition = victimPosition;
            }
            
            this.HitDistance = hitDistance;
        }
        
        /// <summary>
        /// The attacker&#39;s steamID64, must be 17 chars long.
        /// </summary>
        /// <value>The attacker&#39;s steamID64, must be 17 chars long.</value>
        [DataMember(Name="attacker", EmitDefaultValue=true)]
        public string Attacker { get; set; }

        /// <summary>
        /// The attacker&#39;s steamID64, must be 17 chars long.
        /// </summary>
        /// <value>The attacker&#39;s steamID64, must be 17 chars long.</value>
        [DataMember(Name="victim", EmitDefaultValue=true)]
        public string Victim { get; set; }

        /// <summary>
        /// Gets or Sets HitTimestamp
        /// </summary>
        [DataMember(Name="hit_timestamp", EmitDefaultValue=true)]
        public DateTime HitTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets HitDamage
        /// </summary>
        [DataMember(Name="hit_damage", EmitDefaultValue=true)]
        public decimal HitDamage { get; set; }

        /// <summary>
        /// Gets or Sets HitDistance
        /// </summary>
        [DataMember(Name="hit_distance", EmitDefaultValue=false)]
        public decimal HitDistance { get; set; }

        /// <summary>
        /// 1&#x3D;\&quot;Head\&quot;, 2&#x3D;\&quot;Chest\&quot;, 4&#x3D;\&quot;Stomach\&quot;, 8&#x3D;\&quot;Arm\&quot;, 16&#x3D;\&quot;Hand\&quot;, 32&#x3D;\&quot;Leg\&quot;, 64&#x3D;\&quot;Foot\&quot;, -1&#x3D;\&quot;Everywhere\&quot;
        /// </summary>
        /// <value>1&#x3D;\&quot;Head\&quot;, 2&#x3D;\&quot;Chest\&quot;, 4&#x3D;\&quot;Stomach\&quot;, 8&#x3D;\&quot;Arm\&quot;, 16&#x3D;\&quot;Hand\&quot;, 32&#x3D;\&quot;Leg\&quot;, 64&#x3D;\&quot;Foot\&quot;, -1&#x3D;\&quot;Everywhere\&quot;</value>
        [DataMember(Name="hit_area_id", EmitDefaultValue=true)]
        public int HitAreaId { get; set; }

        /// <summary>
        /// Gets or Sets AttackerActiveItem
        /// </summary>
        [DataMember(Name="attacker_active_item", EmitDefaultValue=true)]
        public HitAttackerActiveItem AttackerActiveItem { get; set; }

        /// <summary>
        /// Gets or Sets VictimActiveItem
        /// </summary>
        [DataMember(Name="victim_active_item", EmitDefaultValue=true)]
        public HitAttackerActiveItem VictimActiveItem { get; set; }

        /// <summary>
        /// Gets or Sets AttackerPosition
        /// </summary>
        [DataMember(Name="attacker_position", EmitDefaultValue=true)]
        public PlayerPosition AttackerPosition { get; set; }

        /// <summary>
        /// Gets or Sets VictimPosition
        /// </summary>
        [DataMember(Name="victim_position", EmitDefaultValue=true)]
        public PlayerPosition VictimPosition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Hit {\n");
            sb.Append("  Attacker: ").Append(Attacker).Append("\n");
            sb.Append("  Victim: ").Append(Victim).Append("\n");
            sb.Append("  HitTimestamp: ").Append(HitTimestamp).Append("\n");
            sb.Append("  HitDamage: ").Append(HitDamage).Append("\n");
            sb.Append("  HitDistance: ").Append(HitDistance).Append("\n");
            sb.Append("  HitAreaId: ").Append(HitAreaId).Append("\n");
            sb.Append("  AttackerActiveItem: ").Append(AttackerActiveItem).Append("\n");
            sb.Append("  VictimActiveItem: ").Append(VictimActiveItem).Append("\n");
            sb.Append("  AttackerPosition: ").Append(AttackerPosition).Append("\n");
            sb.Append("  VictimPosition: ").Append(VictimPosition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Hit);
        }

        /// <summary>
        /// Returns true if Hit instances are equal
        /// </summary>
        /// <param name="input">Instance of Hit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Hit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attacker == input.Attacker ||
                    (this.Attacker != null &&
                    this.Attacker.Equals(input.Attacker))
                ) && 
                (
                    this.Victim == input.Victim ||
                    (this.Victim != null &&
                    this.Victim.Equals(input.Victim))
                ) && 
                (
                    this.HitTimestamp == input.HitTimestamp ||
                    (this.HitTimestamp != null &&
                    this.HitTimestamp.Equals(input.HitTimestamp))
                ) && 
                (
                    this.HitDamage == input.HitDamage ||
                    (this.HitDamage != null &&
                    this.HitDamage.Equals(input.HitDamage))
                ) && 
                (
                    this.HitDistance == input.HitDistance ||
                    (this.HitDistance != null &&
                    this.HitDistance.Equals(input.HitDistance))
                ) && 
                (
                    this.HitAreaId == input.HitAreaId ||
                    (this.HitAreaId != null &&
                    this.HitAreaId.Equals(input.HitAreaId))
                ) && 
                (
                    this.AttackerActiveItem == input.AttackerActiveItem ||
                    (this.AttackerActiveItem != null &&
                    this.AttackerActiveItem.Equals(input.AttackerActiveItem))
                ) && 
                (
                    this.VictimActiveItem == input.VictimActiveItem ||
                    (this.VictimActiveItem != null &&
                    this.VictimActiveItem.Equals(input.VictimActiveItem))
                ) && 
                (
                    this.AttackerPosition == input.AttackerPosition ||
                    (this.AttackerPosition != null &&
                    this.AttackerPosition.Equals(input.AttackerPosition))
                ) && 
                (
                    this.VictimPosition == input.VictimPosition ||
                    (this.VictimPosition != null &&
                    this.VictimPosition.Equals(input.VictimPosition))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attacker != null)
                    hashCode = hashCode * 59 + this.Attacker.GetHashCode();
                if (this.Victim != null)
                    hashCode = hashCode * 59 + this.Victim.GetHashCode();
                if (this.HitTimestamp != null)
                    hashCode = hashCode * 59 + this.HitTimestamp.GetHashCode();
                if (this.HitDamage != null)
                    hashCode = hashCode * 59 + this.HitDamage.GetHashCode();
                if (this.HitDistance != null)
                    hashCode = hashCode * 59 + this.HitDistance.GetHashCode();
                if (this.HitAreaId != null)
                    hashCode = hashCode * 59 + this.HitAreaId.GetHashCode();
                if (this.AttackerActiveItem != null)
                    hashCode = hashCode * 59 + this.AttackerActiveItem.GetHashCode();
                if (this.VictimActiveItem != null)
                    hashCode = hashCode * 59 + this.VictimActiveItem.GetHashCode();
                if (this.AttackerPosition != null)
                    hashCode = hashCode * 59 + this.AttackerPosition.GetHashCode();
                if (this.VictimPosition != null)
                    hashCode = hashCode * 59 + this.VictimPosition.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            
            // Attacker (string) pattern
            Regex regexAttacker = new Regex(@"^[0-9]{17}$", RegexOptions.CultureInvariant);
            if (false == regexAttacker.Match(this.Attacker).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Attacker, must match a pattern of " + regexAttacker, new [] { "Attacker" });
            }


            
            // Victim (string) pattern
            Regex regexVictim = new Regex(@"^[0-9]{17}$", RegexOptions.CultureInvariant);
            if (false == regexVictim.Match(this.Victim).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Victim, must match a pattern of " + regexVictim, new [] { "Victim" });
            }

            yield break;
        }
    }

}

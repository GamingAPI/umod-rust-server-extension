/* 
 * GamingEventApi API
 *
 * GamingEventApi API for the rust server
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jonas-lt@live.dk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Server
    /// </summary>
    [DataContract]
    public partial class Server :  IEquatable<Server>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Server" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Server() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Server" /> class.
        /// </summary>
        /// <param name="serverId">serverId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="serverIp">serverIp (required).</param>
        /// <param name="serverPort">serverPort (required).</param>
        /// <param name="mapWipeInterval">mapWipeInterval (required).</param>
        /// <param name="bpWipeInterval">bpWipeInterval (required).</param>
        /// <param name="maxPlayers">maxPlayers (required).</param>
        /// <param name="onlineCount">onlineCount (required).</param>
        /// <param name="currentWipeId">currentWipeId.</param>
        /// <param name="wipeStart">wipeStart.</param>
        /// <param name="wipeEnd">wipeEnd.</param>
        public Server(int serverId = default(int), string name = default(string), string serverIp = default(string), int serverPort = default(int), int mapWipeInterval = default(int), int bpWipeInterval = default(int), int maxPlayers = default(int), int onlineCount = default(int), int currentWipeId = default(int), DateTime wipeStart = default(DateTime), DateTime wipeEnd = default(DateTime))
        {
            // to ensure "serverId" is required (not null)
            if (serverId == null)
            {
                throw new InvalidDataException("serverId is a required property for Server and cannot be null");
            }
            else
            {
                this.ServerId = serverId;
            }
            
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Server and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "serverIp" is required (not null)
            if (serverIp == null)
            {
                throw new InvalidDataException("serverIp is a required property for Server and cannot be null");
            }
            else
            {
                this.ServerIp = serverIp;
            }
            
            // to ensure "serverPort" is required (not null)
            if (serverPort == null)
            {
                throw new InvalidDataException("serverPort is a required property for Server and cannot be null");
            }
            else
            {
                this.ServerPort = serverPort;
            }
            
            // to ensure "mapWipeInterval" is required (not null)
            if (mapWipeInterval == null)
            {
                throw new InvalidDataException("mapWipeInterval is a required property for Server and cannot be null");
            }
            else
            {
                this.MapWipeInterval = mapWipeInterval;
            }
            
            // to ensure "bpWipeInterval" is required (not null)
            if (bpWipeInterval == null)
            {
                throw new InvalidDataException("bpWipeInterval is a required property for Server and cannot be null");
            }
            else
            {
                this.BpWipeInterval = bpWipeInterval;
            }
            
            // to ensure "maxPlayers" is required (not null)
            if (maxPlayers == null)
            {
                throw new InvalidDataException("maxPlayers is a required property for Server and cannot be null");
            }
            else
            {
                this.MaxPlayers = maxPlayers;
            }
            
            // to ensure "onlineCount" is required (not null)
            if (onlineCount == null)
            {
                throw new InvalidDataException("onlineCount is a required property for Server and cannot be null");
            }
            else
            {
                this.OnlineCount = onlineCount;
            }
            
            this.CurrentWipeId = currentWipeId;
            this.WipeStart = wipeStart;
            this.WipeEnd = wipeEnd;
        }
        
        /// <summary>
        /// Gets or Sets ServerId
        /// </summary>
        [DataMember(Name="server_id", EmitDefaultValue=true)]
        public int ServerId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ServerIp
        /// </summary>
        [DataMember(Name="server_ip", EmitDefaultValue=true)]
        public string ServerIp { get; set; }

        /// <summary>
        /// Gets or Sets ServerPort
        /// </summary>
        [DataMember(Name="server_port", EmitDefaultValue=true)]
        public int ServerPort { get; set; }

        /// <summary>
        /// Gets or Sets MapWipeInterval
        /// </summary>
        [DataMember(Name="map_wipe_interval", EmitDefaultValue=true)]
        public int MapWipeInterval { get; set; }

        /// <summary>
        /// Gets or Sets BpWipeInterval
        /// </summary>
        [DataMember(Name="bp_wipe_interval", EmitDefaultValue=true)]
        public int BpWipeInterval { get; set; }

        /// <summary>
        /// Gets or Sets MaxPlayers
        /// </summary>
        [DataMember(Name="max_players", EmitDefaultValue=true)]
        public int MaxPlayers { get; set; }

        /// <summary>
        /// Gets or Sets OnlineCount
        /// </summary>
        [DataMember(Name="online_count", EmitDefaultValue=true)]
        public int OnlineCount { get; set; }

        /// <summary>
        /// Gets or Sets CurrentWipeId
        /// </summary>
        [DataMember(Name="current_wipe_id", EmitDefaultValue=false)]
        public int CurrentWipeId { get; set; }

        /// <summary>
        /// Gets or Sets WipeStart
        /// </summary>
        [DataMember(Name="wipe_start", EmitDefaultValue=false)]
        public DateTime WipeStart { get; set; }

        /// <summary>
        /// Gets or Sets WipeEnd
        /// </summary>
        [DataMember(Name="wipe_end", EmitDefaultValue=false)]
        public DateTime WipeEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Server {\n");
            sb.Append("  ServerId: ").Append(ServerId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ServerIp: ").Append(ServerIp).Append("\n");
            sb.Append("  ServerPort: ").Append(ServerPort).Append("\n");
            sb.Append("  MapWipeInterval: ").Append(MapWipeInterval).Append("\n");
            sb.Append("  BpWipeInterval: ").Append(BpWipeInterval).Append("\n");
            sb.Append("  MaxPlayers: ").Append(MaxPlayers).Append("\n");
            sb.Append("  OnlineCount: ").Append(OnlineCount).Append("\n");
            sb.Append("  CurrentWipeId: ").Append(CurrentWipeId).Append("\n");
            sb.Append("  WipeStart: ").Append(WipeStart).Append("\n");
            sb.Append("  WipeEnd: ").Append(WipeEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Server);
        }

        /// <summary>
        /// Returns true if Server instances are equal
        /// </summary>
        /// <param name="input">Instance of Server to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Server input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServerId == input.ServerId ||
                    (this.ServerId != null &&
                    this.ServerId.Equals(input.ServerId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ServerIp == input.ServerIp ||
                    (this.ServerIp != null &&
                    this.ServerIp.Equals(input.ServerIp))
                ) && 
                (
                    this.ServerPort == input.ServerPort ||
                    (this.ServerPort != null &&
                    this.ServerPort.Equals(input.ServerPort))
                ) && 
                (
                    this.MapWipeInterval == input.MapWipeInterval ||
                    (this.MapWipeInterval != null &&
                    this.MapWipeInterval.Equals(input.MapWipeInterval))
                ) && 
                (
                    this.BpWipeInterval == input.BpWipeInterval ||
                    (this.BpWipeInterval != null &&
                    this.BpWipeInterval.Equals(input.BpWipeInterval))
                ) && 
                (
                    this.MaxPlayers == input.MaxPlayers ||
                    (this.MaxPlayers != null &&
                    this.MaxPlayers.Equals(input.MaxPlayers))
                ) && 
                (
                    this.OnlineCount == input.OnlineCount ||
                    (this.OnlineCount != null &&
                    this.OnlineCount.Equals(input.OnlineCount))
                ) && 
                (
                    this.CurrentWipeId == input.CurrentWipeId ||
                    (this.CurrentWipeId != null &&
                    this.CurrentWipeId.Equals(input.CurrentWipeId))
                ) && 
                (
                    this.WipeStart == input.WipeStart ||
                    (this.WipeStart != null &&
                    this.WipeStart.Equals(input.WipeStart))
                ) && 
                (
                    this.WipeEnd == input.WipeEnd ||
                    (this.WipeEnd != null &&
                    this.WipeEnd.Equals(input.WipeEnd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServerId != null)
                    hashCode = hashCode * 59 + this.ServerId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ServerIp != null)
                    hashCode = hashCode * 59 + this.ServerIp.GetHashCode();
                if (this.ServerPort != null)
                    hashCode = hashCode * 59 + this.ServerPort.GetHashCode();
                if (this.MapWipeInterval != null)
                    hashCode = hashCode * 59 + this.MapWipeInterval.GetHashCode();
                if (this.BpWipeInterval != null)
                    hashCode = hashCode * 59 + this.BpWipeInterval.GetHashCode();
                if (this.MaxPlayers != null)
                    hashCode = hashCode * 59 + this.MaxPlayers.GetHashCode();
                if (this.OnlineCount != null)
                    hashCode = hashCode * 59 + this.OnlineCount.GetHashCode();
                if (this.CurrentWipeId != null)
                    hashCode = hashCode * 59 + this.CurrentWipeId.GetHashCode();
                if (this.WipeStart != null)
                    hashCode = hashCode * 59 + this.WipeStart.GetHashCode();
                if (this.WipeEnd != null)
                    hashCode = hashCode * 59 + this.WipeEnd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

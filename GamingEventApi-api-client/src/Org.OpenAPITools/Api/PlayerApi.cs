/* 
 * GamingEventApi API
 *
 * GamingEventApi API for the rust server
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jonas-lt@live.dk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayerApi : IApiAccessor
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="serverId"></param>
        /// <param name="steamId"></param>
        /// <param name="callback"></param>
        void GetRankOfPlayerWithHttpInfo(int serverId, string steamId, Action<Exception, ApiResponse<RankPlayer>> callback);
        /// <summary>
        /// 
        /// </summary>
        /// <param name="serverId"></param>
        /// <param name="steamId"></param>
        /// <param name="callback"></param>
        void GetTitlesOfPlayerWithHttpInfo(int serverId, string steamId, Action<Exception, ApiResponse<List<PlayerTitle>>> callback);

        #region Synchronous Operations
        /// <summary>
        /// A list of the player&#39;s achievements devided into groups.
        /// </summary>
        /// <remarks>
        /// A list of the player&#39;s achievements devided into groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>List&lt;PlayerAchievementGroup&gt;</returns>
        List<PlayerAchievementGroup> GetAchievementGroupsForPlayerOnServer (int serverId, string steamId);

        /// <summary>
        /// A list of the player&#39;s achievements devided into groups.
        /// </summary>
        /// <remarks>
        /// A list of the player&#39;s achievements devided into groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>ApiResponse of List&lt;PlayerAchievementGroup&gt;</returns>
        ApiResponse<List<PlayerAchievementGroup>> GetAchievementGroupsForPlayerOnServerWithHttpInfo (int serverId, string steamId);
        /// <summary>
        /// A list of players obtained achievements.
        /// </summary>
        /// <remarks>
        /// This returns all the players obtained achievements
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>List&lt;PlayerAchievement&gt;</returns>
        List<PlayerAchievement> GetAchievementsOfPlayer (int serverId, string steamId);

        /// <summary>
        /// A list of players obtained achievements.
        /// </summary>
        /// <remarks>
        /// This returns all the players obtained achievements
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>ApiResponse of List&lt;PlayerAchievement&gt;</returns>
        ApiResponse<List<PlayerAchievement>> GetAchievementsOfPlayerWithHttpInfo (int serverId, string steamId);
        /// <summary>
        /// A players deaths on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players deaths on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;CombatKill&gt;</returns>
        List<CombatKill> GetPlayerCombatDeaths (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// A players deaths on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players deaths on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;CombatKill&gt;</returns>
        ApiResponse<List<CombatKill>> GetPlayerCombatDeathsWithHttpInfo (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// A players deaths on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players deaths on a specific server in the specific wipe
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="wipeId">The wipe id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;CombatKill&gt;</returns>
        List<CombatKill> GetPlayerCombatDeathsOnWipe (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// A players deaths on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players deaths on a specific server in the specific wipe
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="wipeId">The wipe id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;CombatKill&gt;</returns>
        ApiResponse<List<CombatKill>> GetPlayerCombatDeathsOnWipeWithHttpInfo (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// A players kills on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players kills on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;CombatKill&gt;</returns>
        List<CombatKill> GetPlayerCombatKills (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// A players kills on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players kills on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;CombatKill&gt;</returns>
        ApiResponse<List<CombatKill>> GetPlayerCombatKillsWithHttpInfo (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// A players kills on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players kills on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;CombatKill&gt;</returns>
        List<CombatKill> GetPlayerCombatKillsInWipe (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// A players kills on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players kills on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;CombatKill&gt;</returns>
        ApiResponse<List<CombatKill>> GetPlayerCombatKillsInWipeWithHttpInfo (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Rank stats on specific player on a specific server.
        /// </summary>
        /// <remarks>
        /// This returns the rank of the specific player on the specific server.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>RankPlayer</returns>
        RankPlayer GetRankOfPlayer (int serverId, string steamId);

        /// <summary>
        /// Rank stats on specific player on a specific server.
        /// </summary>
        /// <remarks>
        /// This returns the rank of the specific player on the specific server.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>ApiResponse of RankPlayer</returns>
        ApiResponse<RankPlayer> GetRankOfPlayerWithHttpInfo (int serverId, string steamId);
        /// <summary>
        /// Rank stats on specific player on a specific server on a specific wipe.
        /// </summary>
        /// <remarks>
        /// This returns the rank of the specific player on the specific server in a specific wipe.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64, must be 17 chars long.</param>
        /// <returns>RankPlayer</returns>
        RankPlayer GetRankOfPlayerOnWipe (int serverId, int wipeId, string steamId);

        /// <summary>
        /// Rank stats on specific player on a specific server on a specific wipe.
        /// </summary>
        /// <remarks>
        /// This returns the rank of the specific player on the specific server in a specific wipe.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64, must be 17 chars long.</param>
        /// <returns>ApiResponse of RankPlayer</returns>
        ApiResponse<RankPlayer> GetRankOfPlayerOnWipeWithHttpInfo (int serverId, int wipeId, string steamId);
        /// <summary>
        /// A list of titles for the player.
        /// </summary>
        /// <remarks>
        /// This returns all the players titles
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>List&lt;PlayerTitle&gt;</returns>
        List<PlayerTitle> GetTitlesOfPlayer (int serverId, string steamId);

        /// <summary>
        /// A list of titles for the player.
        /// </summary>
        /// <remarks>
        /// This returns all the players titles
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>ApiResponse of List&lt;PlayerTitle&gt;</returns>
        ApiResponse<List<PlayerTitle>> GetTitlesOfPlayerWithHttpInfo (int serverId, string steamId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// A list of the player&#39;s achievements devided into groups.
        /// </summary>
        /// <remarks>
        /// A list of the player&#39;s achievements devided into groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of List&lt;PlayerAchievementGroup&gt;</returns>
        System.Threading.Tasks.Task<List<PlayerAchievementGroup>> GetAchievementGroupsForPlayerOnServerAsync (int serverId, string steamId);

        /// <summary>
        /// A list of the player&#39;s achievements devided into groups.
        /// </summary>
        /// <remarks>
        /// A list of the player&#39;s achievements devided into groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerAchievementGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlayerAchievementGroup>>> GetAchievementGroupsForPlayerOnServerAsyncWithHttpInfo (int serverId, string steamId);
        /// <summary>
        /// A list of players obtained achievements.
        /// </summary>
        /// <remarks>
        /// This returns all the players obtained achievements
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of List&lt;PlayerAchievement&gt;</returns>
        System.Threading.Tasks.Task<List<PlayerAchievement>> GetAchievementsOfPlayerAsync (int serverId, string steamId);

        /// <summary>
        /// A list of players obtained achievements.
        /// </summary>
        /// <remarks>
        /// This returns all the players obtained achievements
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerAchievement&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlayerAchievement>>> GetAchievementsOfPlayerAsyncWithHttpInfo (int serverId, string steamId);
        /// <summary>
        /// A players deaths on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players deaths on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;CombatKill&gt;</returns>
        System.Threading.Tasks.Task<List<CombatKill>> GetPlayerCombatDeathsAsync (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// A players deaths on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players deaths on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CombatKill&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CombatKill>>> GetPlayerCombatDeathsAsyncWithHttpInfo (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// A players deaths on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players deaths on a specific server in the specific wipe
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="wipeId">The wipe id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;CombatKill&gt;</returns>
        System.Threading.Tasks.Task<List<CombatKill>> GetPlayerCombatDeathsOnWipeAsync (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// A players deaths on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players deaths on a specific server in the specific wipe
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="wipeId">The wipe id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CombatKill&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CombatKill>>> GetPlayerCombatDeathsOnWipeAsyncWithHttpInfo (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// A players kills on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players kills on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;CombatKill&gt;</returns>
        System.Threading.Tasks.Task<List<CombatKill>> GetPlayerCombatKillsAsync (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// A players kills on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players kills on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CombatKill&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CombatKill>>> GetPlayerCombatKillsAsyncWithHttpInfo (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// A players kills on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players kills on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;CombatKill&gt;</returns>
        System.Threading.Tasks.Task<List<CombatKill>> GetPlayerCombatKillsInWipeAsync (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// A players kills on a server
        /// </summary>
        /// <remarks>
        /// This returns all the players kills on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CombatKill&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CombatKill>>> GetPlayerCombatKillsInWipeAsyncWithHttpInfo (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Rank stats on specific player on a specific server.
        /// </summary>
        /// <remarks>
        /// This returns the rank of the specific player on the specific server.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of RankPlayer</returns>
        System.Threading.Tasks.Task<RankPlayer> GetRankOfPlayerAsync (int serverId, string steamId);

        /// <summary>
        /// Rank stats on specific player on a specific server.
        /// </summary>
        /// <remarks>
        /// This returns the rank of the specific player on the specific server.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of ApiResponse (RankPlayer)</returns>
        System.Threading.Tasks.Task<ApiResponse<RankPlayer>> GetRankOfPlayerAsyncWithHttpInfo (int serverId, string steamId);
        /// <summary>
        /// Rank stats on specific player on a specific server on a specific wipe.
        /// </summary>
        /// <remarks>
        /// This returns the rank of the specific player on the specific server in a specific wipe.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64, must be 17 chars long.</param>
        /// <returns>Task of RankPlayer</returns>
        System.Threading.Tasks.Task<RankPlayer> GetRankOfPlayerOnWipeAsync (int serverId, int wipeId, string steamId);

        /// <summary>
        /// Rank stats on specific player on a specific server on a specific wipe.
        /// </summary>
        /// <remarks>
        /// This returns the rank of the specific player on the specific server in a specific wipe.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64, must be 17 chars long.</param>
        /// <returns>Task of ApiResponse (RankPlayer)</returns>
        System.Threading.Tasks.Task<ApiResponse<RankPlayer>> GetRankOfPlayerOnWipeAsyncWithHttpInfo (int serverId, int wipeId, string steamId);
        /// <summary>
        /// A list of titles for the player.
        /// </summary>
        /// <remarks>
        /// This returns all the players titles
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of List&lt;PlayerTitle&gt;</returns>
        System.Threading.Tasks.Task<List<PlayerTitle>> GetTitlesOfPlayerAsync (int serverId, string steamId);

        /// <summary>
        /// A list of titles for the player.
        /// </summary>
        /// <remarks>
        /// This returns all the players titles
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerTitle&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlayerTitle>>> GetTitlesOfPlayerAsyncWithHttpInfo (int serverId, string steamId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlayerApi : IPlayerApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayerApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class
        /// </summary>
        /// <returns></returns>
        public PlayerApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlayerApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// A list of the player&#39;s achievements devided into groups. A list of the player&#39;s achievements devided into groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>List&lt;PlayerAchievementGroup&gt;</returns>
        public List<PlayerAchievementGroup> GetAchievementGroupsForPlayerOnServer (int serverId, string steamId)
        {
             ApiResponse<List<PlayerAchievementGroup>> localVarResponse = GetAchievementGroupsForPlayerOnServerWithHttpInfo(serverId, steamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A list of the player&#39;s achievements devided into groups. A list of the player&#39;s achievements devided into groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>ApiResponse of List&lt;PlayerAchievementGroup&gt;</returns>
        public ApiResponse<List<PlayerAchievementGroup>> GetAchievementGroupsForPlayerOnServerWithHttpInfo (int serverId, string steamId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetAchievementGroupsForPlayerOnServer");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetAchievementGroupsForPlayerOnServer");

            var localVarPath = "/servers/{server_id}/player/{steam_id}/achievements/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementGroupsForPlayerOnServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PlayerAchievementGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PlayerAchievementGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerAchievementGroup>)));
        }

        /// <summary>
        /// A list of the player&#39;s achievements devided into groups. A list of the player&#39;s achievements devided into groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of List&lt;PlayerAchievementGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlayerAchievementGroup>> GetAchievementGroupsForPlayerOnServerAsync (int serverId, string steamId)
        {
             ApiResponse<List<PlayerAchievementGroup>> localVarResponse = await GetAchievementGroupsForPlayerOnServerAsyncWithHttpInfo(serverId, steamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A list of the player&#39;s achievements devided into groups. A list of the player&#39;s achievements devided into groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerAchievementGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PlayerAchievementGroup>>> GetAchievementGroupsForPlayerOnServerAsyncWithHttpInfo (int serverId, string steamId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetAchievementGroupsForPlayerOnServer");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetAchievementGroupsForPlayerOnServer");

            var localVarPath = "/servers/{server_id}/player/{steam_id}/achievements/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementGroupsForPlayerOnServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PlayerAchievementGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PlayerAchievementGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerAchievementGroup>)));
        }

        /// <summary>
        /// A list of players obtained achievements. This returns all the players obtained achievements
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>List&lt;PlayerAchievement&gt;</returns>
        public List<PlayerAchievement> GetAchievementsOfPlayer (int serverId, string steamId)
        {
             ApiResponse<List<PlayerAchievement>> localVarResponse = GetAchievementsOfPlayerWithHttpInfo(serverId, steamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A list of players obtained achievements. This returns all the players obtained achievements
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>ApiResponse of List&lt;PlayerAchievement&gt;</returns>
        public ApiResponse<List<PlayerAchievement>> GetAchievementsOfPlayerWithHttpInfo (int serverId, string steamId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetAchievementsOfPlayer");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetAchievementsOfPlayer");

            var localVarPath = "/servers/{server_id}/player/{steam_id}/achievements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementsOfPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PlayerAchievement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PlayerAchievement>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerAchievement>)));
        }

        /// <summary>
        /// A list of players obtained achievements. This returns all the players obtained achievements
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of List&lt;PlayerAchievement&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlayerAchievement>> GetAchievementsOfPlayerAsync (int serverId, string steamId)
        {
             ApiResponse<List<PlayerAchievement>> localVarResponse = await GetAchievementsOfPlayerAsyncWithHttpInfo(serverId, steamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A list of players obtained achievements. This returns all the players obtained achievements
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerAchievement&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PlayerAchievement>>> GetAchievementsOfPlayerAsyncWithHttpInfo (int serverId, string steamId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetAchievementsOfPlayer");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetAchievementsOfPlayer");

            var localVarPath = "/servers/{server_id}/player/{steam_id}/achievements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementsOfPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PlayerAchievement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PlayerAchievement>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerAchievement>)));
        }

        /// <summary>
        /// A players deaths on a server This returns all the players deaths on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;CombatKill&gt;</returns>
        public List<CombatKill> GetPlayerCombatDeaths (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<CombatKill>> localVarResponse = GetPlayerCombatDeathsWithHttpInfo(serverId, steamId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A players deaths on a server This returns all the players deaths on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;CombatKill&gt;</returns>
        public ApiResponse<List<CombatKill>> GetPlayerCombatDeathsWithHttpInfo (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetPlayerCombatDeaths");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetPlayerCombatDeaths");

            var localVarPath = "/servers/{server_id}/player/{steam_id}/combatlog/deaths";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerCombatDeaths", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CombatKill>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CombatKill>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CombatKill>)));
        }

        /// <summary>
        /// A players deaths on a server This returns all the players deaths on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;CombatKill&gt;</returns>
        public async System.Threading.Tasks.Task<List<CombatKill>> GetPlayerCombatDeathsAsync (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<CombatKill>> localVarResponse = await GetPlayerCombatDeathsAsyncWithHttpInfo(serverId, steamId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A players deaths on a server This returns all the players deaths on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CombatKill&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CombatKill>>> GetPlayerCombatDeathsAsyncWithHttpInfo (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetPlayerCombatDeaths");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetPlayerCombatDeaths");

            var localVarPath = "/servers/{server_id}/player/{steam_id}/combatlog/deaths";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerCombatDeaths", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CombatKill>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CombatKill>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CombatKill>)));
        }

        /// <summary>
        /// A players deaths on a server This returns all the players deaths on a specific server in the specific wipe
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="wipeId">The wipe id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;CombatKill&gt;</returns>
        public List<CombatKill> GetPlayerCombatDeathsOnWipe (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<CombatKill>> localVarResponse = GetPlayerCombatDeathsOnWipeWithHttpInfo(serverId, wipeId, steamId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A players deaths on a server This returns all the players deaths on a specific server in the specific wipe
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="wipeId">The wipe id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;CombatKill&gt;</returns>
        public ApiResponse<List<CombatKill>> GetPlayerCombatDeathsOnWipeWithHttpInfo (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetPlayerCombatDeathsOnWipe");
            // verify the required parameter 'wipeId' is set
            if (wipeId == null)
                throw new ApiException(400, "Missing required parameter 'wipeId' when calling PlayerApi->GetPlayerCombatDeathsOnWipe");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetPlayerCombatDeathsOnWipe");

            var localVarPath = "/servers/{server_id}/wipe/{wipe_id}/player/{steam_id}/combatlog/deaths";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (wipeId != null) localVarPathParams.Add("wipe_id", this.Configuration.ApiClient.ParameterToString(wipeId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerCombatDeathsOnWipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CombatKill>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CombatKill>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CombatKill>)));
        }

        /// <summary>
        /// A players deaths on a server This returns all the players deaths on a specific server in the specific wipe
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="wipeId">The wipe id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;CombatKill&gt;</returns>
        public async System.Threading.Tasks.Task<List<CombatKill>> GetPlayerCombatDeathsOnWipeAsync (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<CombatKill>> localVarResponse = await GetPlayerCombatDeathsOnWipeAsyncWithHttpInfo(serverId, wipeId, steamId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A players deaths on a server This returns all the players deaths on a specific server in the specific wipe
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the deaths on</param>
        /// <param name="wipeId">The wipe id to retrieve the deaths on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the deaths for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CombatKill&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CombatKill>>> GetPlayerCombatDeathsOnWipeAsyncWithHttpInfo (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetPlayerCombatDeathsOnWipe");
            // verify the required parameter 'wipeId' is set
            if (wipeId == null)
                throw new ApiException(400, "Missing required parameter 'wipeId' when calling PlayerApi->GetPlayerCombatDeathsOnWipe");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetPlayerCombatDeathsOnWipe");

            var localVarPath = "/servers/{server_id}/wipe/{wipe_id}/player/{steam_id}/combatlog/deaths";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (wipeId != null) localVarPathParams.Add("wipe_id", this.Configuration.ApiClient.ParameterToString(wipeId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerCombatDeathsOnWipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CombatKill>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CombatKill>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CombatKill>)));
        }

        /// <summary>
        /// A players kills on a server This returns all the players kills on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;CombatKill&gt;</returns>
        public List<CombatKill> GetPlayerCombatKills (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<CombatKill>> localVarResponse = GetPlayerCombatKillsWithHttpInfo(serverId, steamId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A players kills on a server This returns all the players kills on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;CombatKill&gt;</returns>
        public ApiResponse<List<CombatKill>> GetPlayerCombatKillsWithHttpInfo (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetPlayerCombatKills");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetPlayerCombatKills");

            var localVarPath = "/servers/{server_id}/player/{steam_id}/combatlog/kills";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerCombatKills", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CombatKill>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CombatKill>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CombatKill>)));
        }

        /// <summary>
        /// A players kills on a server This returns all the players kills on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;CombatKill&gt;</returns>
        public async System.Threading.Tasks.Task<List<CombatKill>> GetPlayerCombatKillsAsync (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<CombatKill>> localVarResponse = await GetPlayerCombatKillsAsyncWithHttpInfo(serverId, steamId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A players kills on a server This returns all the players kills on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CombatKill&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CombatKill>>> GetPlayerCombatKillsAsyncWithHttpInfo (int serverId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetPlayerCombatKills");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetPlayerCombatKills");

            var localVarPath = "/servers/{server_id}/player/{steam_id}/combatlog/kills";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerCombatKills", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CombatKill>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CombatKill>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CombatKill>)));
        }

        /// <summary>
        /// A players kills on a server This returns all the players kills on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;CombatKill&gt;</returns>
        public List<CombatKill> GetPlayerCombatKillsInWipe (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<CombatKill>> localVarResponse = GetPlayerCombatKillsInWipeWithHttpInfo(serverId, wipeId, steamId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A players kills on a server This returns all the players kills on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;CombatKill&gt;</returns>
        public ApiResponse<List<CombatKill>> GetPlayerCombatKillsInWipeWithHttpInfo (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetPlayerCombatKillsInWipe");
            // verify the required parameter 'wipeId' is set
            if (wipeId == null)
                throw new ApiException(400, "Missing required parameter 'wipeId' when calling PlayerApi->GetPlayerCombatKillsInWipe");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetPlayerCombatKillsInWipe");

            var localVarPath = "/servers/{server_id}/wipe/{wipe_id}/player/{steam_id}/combatlog/kills";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (wipeId != null) localVarPathParams.Add("wipe_id", this.Configuration.ApiClient.ParameterToString(wipeId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerCombatKillsInWipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CombatKill>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CombatKill>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CombatKill>)));
        }

        /// <summary>
        /// A players kills on a server This returns all the players kills on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;CombatKill&gt;</returns>
        public async System.Threading.Tasks.Task<List<CombatKill>> GetPlayerCombatKillsInWipeAsync (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<CombatKill>> localVarResponse = await GetPlayerCombatKillsInWipeAsyncWithHttpInfo(serverId, wipeId, steamId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A players kills on a server This returns all the players kills on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained kills for, must be 17 chars long.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CombatKill&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CombatKill>>> GetPlayerCombatKillsInWipeAsyncWithHttpInfo (int serverId, int wipeId, string steamId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetPlayerCombatKillsInWipe");
            // verify the required parameter 'wipeId' is set
            if (wipeId == null)
                throw new ApiException(400, "Missing required parameter 'wipeId' when calling PlayerApi->GetPlayerCombatKillsInWipe");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetPlayerCombatKillsInWipe");

            var localVarPath = "/servers/{server_id}/wipe/{wipe_id}/player/{steam_id}/combatlog/kills";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (wipeId != null) localVarPathParams.Add("wipe_id", this.Configuration.ApiClient.ParameterToString(wipeId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerCombatKillsInWipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CombatKill>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CombatKill>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CombatKill>)));
        }

        /// <summary>
        /// Rank stats on specific player on a specific server. This returns the rank of the specific player on the specific server.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>RankPlayer</returns>
        public RankPlayer GetRankOfPlayer (int serverId, string steamId)
        {
             ApiResponse<RankPlayer> localVarResponse = GetRankOfPlayerWithHttpInfo(serverId, steamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="serverId"></param>
        /// <param name="steamId"></param>
        /// <param name="callback"></param>
        public void GetRankOfPlayerWithHttpInfo(int serverId, string steamId, Action<ApiResponse<RankPlayer>> callback)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetRankOfPlayer");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetRankOfPlayer");

            var localVarPath = "/servers/{server_id}/player/{steam_id}/rank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            this.Configuration.ApiClient.CallApiWithCallback(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, (localVarResponse, handler) => {
                    int localVarStatusCode = (int)localVarResponse.StatusCode;

                    if (ExceptionFactory != null)
                    {
                        Exception exception = ExceptionFactory("GetRankOfPlayer", localVarResponse);
                        if (exception != null) throw exception;
                    }

                    var resp = new ApiResponse<RankPlayer>(localVarStatusCode,
                        localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                        (RankPlayer)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RankPlayer)));
                    callback(resp);
                });

        }

        /// <summary>
        /// Rank stats on specific player on a specific server. This returns the rank of the specific player on the specific server.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>ApiResponse of RankPlayer</returns>
        public ApiResponse<RankPlayer> GetRankOfPlayerWithHttpInfo (int serverId, string steamId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetRankOfPlayer");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetRankOfPlayer");

            var localVarPath = "/servers/{server_id}/player/{steam_id}/rank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRankOfPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RankPlayer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RankPlayer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RankPlayer)));
        }

        /// <summary>
        /// Rank stats on specific player on a specific server. This returns the rank of the specific player on the specific server.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of RankPlayer</returns>
        public async System.Threading.Tasks.Task<RankPlayer> GetRankOfPlayerAsync (int serverId, string steamId)
        {
             ApiResponse<RankPlayer> localVarResponse = await GetRankOfPlayerAsyncWithHttpInfo(serverId, steamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Rank stats on specific player on a specific server. This returns the rank of the specific player on the specific server.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of ApiResponse (RankPlayer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RankPlayer>> GetRankOfPlayerAsyncWithHttpInfo (int serverId, string steamId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetRankOfPlayer");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetRankOfPlayer");

            var localVarPath = "/servers/{server_id}/player/{steam_id}/rank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRankOfPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RankPlayer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RankPlayer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RankPlayer)));
        }

        /// <summary>
        /// Rank stats on specific player on a specific server on a specific wipe. This returns the rank of the specific player on the specific server in a specific wipe.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64, must be 17 chars long.</param>
        /// <returns>RankPlayer</returns>
        public RankPlayer GetRankOfPlayerOnWipe (int serverId, int wipeId, string steamId)
        {
             ApiResponse<RankPlayer> localVarResponse = GetRankOfPlayerOnWipeWithHttpInfo(serverId, wipeId, steamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Rank stats on specific player on a specific server on a specific wipe. This returns the rank of the specific player on the specific server in a specific wipe.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64, must be 17 chars long.</param>
        /// <returns>ApiResponse of RankPlayer</returns>
        public ApiResponse<RankPlayer> GetRankOfPlayerOnWipeWithHttpInfo (int serverId, int wipeId, string steamId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetRankOfPlayerOnWipe");
            // verify the required parameter 'wipeId' is set
            if (wipeId == null)
                throw new ApiException(400, "Missing required parameter 'wipeId' when calling PlayerApi->GetRankOfPlayerOnWipe");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetRankOfPlayerOnWipe");

            var localVarPath = "/servers/{server_id}/wipe/{wipe_id}/player/{steam_id}/rank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (wipeId != null) localVarPathParams.Add("wipe_id", this.Configuration.ApiClient.ParameterToString(wipeId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRankOfPlayerOnWipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RankPlayer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RankPlayer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RankPlayer)));
        }

        /// <summary>
        /// Rank stats on specific player on a specific server on a specific wipe. This returns the rank of the specific player on the specific server in a specific wipe.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64, must be 17 chars long.</param>
        /// <returns>Task of RankPlayer</returns>
        public async System.Threading.Tasks.Task<RankPlayer> GetRankOfPlayerOnWipeAsync (int serverId, int wipeId, string steamId)
        {
             ApiResponse<RankPlayer> localVarResponse = await GetRankOfPlayerOnWipeAsyncWithHttpInfo(serverId, wipeId, steamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Rank stats on specific player on a specific server on a specific wipe. This returns the rank of the specific player on the specific server in a specific wipe.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64, must be 17 chars long.</param>
        /// <returns>Task of ApiResponse (RankPlayer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RankPlayer>> GetRankOfPlayerOnWipeAsyncWithHttpInfo (int serverId, int wipeId, string steamId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetRankOfPlayerOnWipe");
            // verify the required parameter 'wipeId' is set
            if (wipeId == null)
                throw new ApiException(400, "Missing required parameter 'wipeId' when calling PlayerApi->GetRankOfPlayerOnWipe");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetRankOfPlayerOnWipe");

            var localVarPath = "/servers/{server_id}/wipe/{wipe_id}/player/{steam_id}/rank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (wipeId != null) localVarPathParams.Add("wipe_id", this.Configuration.ApiClient.ParameterToString(wipeId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRankOfPlayerOnWipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RankPlayer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RankPlayer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RankPlayer)));
        }

        /// <summary>
        /// A list of titles for the player. This returns all the players titles
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>List&lt;PlayerTitle&gt;</returns>
        public List<PlayerTitle> GetTitlesOfPlayer (int serverId, string steamId)
        {
             ApiResponse<List<PlayerTitle>> localVarResponse = GetTitlesOfPlayerWithHttpInfo(serverId, steamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="serverId"></param>
        /// <param name="steamId"></param>
        /// <param name="callback"></param>
        public void GetTitlesOfPlayerWithHttpInfo(int serverId, string steamId, Action<Exception, ApiResponse<List<PlayerTitle>>> callback)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetTitlesOfPlayer");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetTitlesOfPlayer");

            var localVarPath = "/servers/{server_id}/player/{steam_id}/titles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            this.Configuration.ApiClient.CallApiWithCallback(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, (localVarResponse, handler) => {

                    int localVarStatusCode = (int)localVarResponse.StatusCode;

                    if (ExceptionFactory != null)
                    {
                        Exception exception = ExceptionFactory("GetTitlesOfPlayer", localVarResponse);
                        var resp = new ApiResponse<List<PlayerTitle>>(localVarStatusCode,
                            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                            (List<PlayerTitle>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerTitle>)));
                        callback(exception, null);
                    }
                    else
                    {
                        var resp = new ApiResponse<List<PlayerTitle>>(localVarStatusCode,
                            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                            (List<PlayerTitle>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerTitle>)));
                        callback(null, resp);
                    }

                });

        }
        /// <summary>
        /// A list of titles for the player. This returns all the players titles
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>ApiResponse of List&lt;PlayerTitle&gt;</returns>
        public ApiResponse<List<PlayerTitle>> GetTitlesOfPlayerWithHttpInfo (int serverId, string steamId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetTitlesOfPlayer");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetTitlesOfPlayer");

            var localVarPath = "/servers/{server_id}/player/{steam_id}/titles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTitlesOfPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PlayerTitle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PlayerTitle>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerTitle>)));
        }

        /// <summary>
        /// A list of titles for the player. This returns all the players titles
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of List&lt;PlayerTitle&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlayerTitle>> GetTitlesOfPlayerAsync (int serverId, string steamId)
        {
             ApiResponse<List<PlayerTitle>> localVarResponse = await GetTitlesOfPlayerAsyncWithHttpInfo(serverId, steamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A list of titles for the player. This returns all the players titles
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="steamId">The player&#39;s steamID64 to find the obtained achievements for, must be 17 chars long.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayerTitle&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PlayerTitle>>> GetTitlesOfPlayerAsyncWithHttpInfo (int serverId, string steamId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling PlayerApi->GetTitlesOfPlayer");
            // verify the required parameter 'steamId' is set
            if (steamId == null)
                throw new ApiException(400, "Missing required parameter 'steamId' when calling PlayerApi->GetTitlesOfPlayer");

            var localVarPath = "/servers/{server_id}/player/{steam_id}/titles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (steamId != null) localVarPathParams.Add("steam_id", this.Configuration.ApiClient.ParameterToString(steamId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTitlesOfPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PlayerTitle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PlayerTitle>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerTitle>)));
        }

        public void GetRankOfPlayerWithHttpInfo(int serverId, string steamId, Action<Exception, ApiResponse<RankPlayer>> callback)
        {
            throw new NotImplementedException();
        }
    }
}

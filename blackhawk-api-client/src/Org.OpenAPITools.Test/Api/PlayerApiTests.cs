/* 
 * Blackhawk API
 *
 * Blackhawk API for the rust server
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jonas-lt@live.dk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing PlayerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PlayerApiTests
    {
        private PlayerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PlayerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PlayerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' PlayerApi
            //Assert.IsInstanceOf(typeof(PlayerApi), instance);
        }

        
        /// <summary>
        /// Test GetAchievementGroupsForPlayerOnServer
        /// </summary>
        [Test]
        public void GetAchievementGroupsForPlayerOnServerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int serverId = null;
            //string steamId = null;
            //var response = instance.GetAchievementGroupsForPlayerOnServer(serverId, steamId);
            //Assert.IsInstanceOf(typeof(List<PlayerAchievementGroup>), response, "response is List<PlayerAchievementGroup>");
        }
        
        /// <summary>
        /// Test GetAchievementsOfPlayer
        /// </summary>
        [Test]
        public void GetAchievementsOfPlayerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int serverId = null;
            //string steamId = null;
            //var response = instance.GetAchievementsOfPlayer(serverId, steamId);
            //Assert.IsInstanceOf(typeof(List<PlayerAchievement>), response, "response is List<PlayerAchievement>");
        }
        
        /// <summary>
        /// Test GetPlayerCombatDeaths
        /// </summary>
        [Test]
        public void GetPlayerCombatDeathsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int serverId = null;
            //string steamId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetPlayerCombatDeaths(serverId, steamId, offset, limit);
            //Assert.IsInstanceOf(typeof(List<CombatKill>), response, "response is List<CombatKill>");
        }
        
        /// <summary>
        /// Test GetPlayerCombatDeathsOnWipe
        /// </summary>
        [Test]
        public void GetPlayerCombatDeathsOnWipeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int serverId = null;
            //int wipeId = null;
            //string steamId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetPlayerCombatDeathsOnWipe(serverId, wipeId, steamId, offset, limit);
            //Assert.IsInstanceOf(typeof(List<CombatKill>), response, "response is List<CombatKill>");
        }
        
        /// <summary>
        /// Test GetPlayerCombatKills
        /// </summary>
        [Test]
        public void GetPlayerCombatKillsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int serverId = null;
            //string steamId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetPlayerCombatKills(serverId, steamId, offset, limit);
            //Assert.IsInstanceOf(typeof(List<CombatKill>), response, "response is List<CombatKill>");
        }
        
        /// <summary>
        /// Test GetPlayerCombatKillsInWipe
        /// </summary>
        [Test]
        public void GetPlayerCombatKillsInWipeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int serverId = null;
            //int wipeId = null;
            //string steamId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetPlayerCombatKillsInWipe(serverId, wipeId, steamId, offset, limit);
            //Assert.IsInstanceOf(typeof(List<CombatKill>), response, "response is List<CombatKill>");
        }
        
        /// <summary>
        /// Test GetRankOfPlayer
        /// </summary>
        [Test]
        public void GetRankOfPlayerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int serverId = null;
            //string steamId = null;
            //var response = instance.GetRankOfPlayer(serverId, steamId);
            //Assert.IsInstanceOf(typeof(RankPlayer), response, "response is RankPlayer");
        }
        
        /// <summary>
        /// Test GetRankOfPlayerOnWipe
        /// </summary>
        [Test]
        public void GetRankOfPlayerOnWipeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int serverId = null;
            //int wipeId = null;
            //string steamId = null;
            //var response = instance.GetRankOfPlayerOnWipe(serverId, wipeId, steamId);
            //Assert.IsInstanceOf(typeof(RankPlayer), response, "response is RankPlayer");
        }
        
        /// <summary>
        /// Test GetTitlesOfPlayer
        /// </summary>
        [Test]
        public void GetTitlesOfPlayerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int serverId = null;
            //string steamId = null;
            //var response = instance.GetTitlesOfPlayer(serverId, steamId);
            //Assert.IsInstanceOf(typeof(List<PlayerTitle>), response, "response is List<PlayerTitle>");
        }
        
    }

}

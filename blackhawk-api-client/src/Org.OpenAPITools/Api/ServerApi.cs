/* 
 * Blackhawk API
 *
 * Blackhawk API for the rust server
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jonas-lt@live.dk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServerApi : IApiAccessor
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="serverId"></param>
        /// <param name="callback"></param>
        void GetTitlesFromServerWithHttpInfo(int serverId, Action<ApiResponse<List<Title>>> callback);
        /// <summary>
        /// 
        /// </summary>
        /// <param name="serverId"></param>
        /// <param name="callback"></param>
        void GetAchievementsOfServerWithHttpInfo(int serverId, Action<ApiResponse<List<Achievement>>> callback);
        #region Synchronous Operations
        /// <summary>
        /// A list of all groups with subgroups and achievements for a server
        /// </summary>
        /// <remarks>
        /// This returns the list of groups with subgroups and their achievements for a server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for.</param>
        /// <returns>List&lt;AchievementGroup&gt;</returns>
        List<AchievementGroup> GetAchievementGroupsOfServer (int serverId);

        /// <summary>
        /// A list of all groups with subgroups and achievements for a server
        /// </summary>
        /// <remarks>
        /// This returns the list of groups with subgroups and their achievements for a server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for.</param>
        /// <returns>ApiResponse of List&lt;AchievementGroup&gt;</returns>
        ApiResponse<List<AchievementGroup>> GetAchievementGroupsOfServerWithHttpInfo (int serverId);
        /// <summary>
        /// A list of all achievements on specific server.
        /// </summary>
        /// <remarks>
        /// This returns all the achievements on a server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <returns>List&lt;Achievement&gt;</returns>
        List<Achievement> GetAchievementsOfServer (int serverId);

        /// <summary>
        /// A list of all achievements on specific server.
        /// </summary>
        /// <remarks>
        /// This returns all the achievements on a server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <returns>ApiResponse of List&lt;Achievement&gt;</returns>
        ApiResponse<List<Achievement>> GetAchievementsOfServerWithHttpInfo (int serverId);
        /// <summary>
        /// Kills on a server in a wipe
        /// </summary>
        /// <remarks>
        /// This returns all the kills on a specific server in the specific wipe
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;CombatKill&gt;</returns>
        List<CombatKill> GetCombatKillsOnWipe (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Kills on a server in a wipe
        /// </summary>
        /// <remarks>
        /// This returns all the kills on a specific server in the specific wipe
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;CombatKill&gt;</returns>
        ApiResponse<List<CombatKill>> GetCombatKillsOnWipeWithHttpInfo (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Hunt for weapons list of the current wipe.
        /// </summary>
        /// <remarks>
        /// This returns a list of all the hunt for weapons items for this wipe and if any of them has been found and by who.. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;HuntForWeapon&gt;</returns>
        List<HuntForWeapon> GetHuntForWeaponsForCurrentWipe (int serverId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Hunt for weapons list of the current wipe.
        /// </summary>
        /// <remarks>
        /// This returns a list of all the hunt for weapons items for this wipe and if any of them has been found and by who.. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;HuntForWeapon&gt;</returns>
        ApiResponse<List<HuntForWeapon>> GetHuntForWeaponsForCurrentWipeWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Hunt for weapons list for the specific server in the specific wipe.
        /// </summary>
        /// <remarks>
        /// This returns a list of all the hunt for weapons items for the specific wipe and if any of them has been found and by who.. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="wipeId">The wipe id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;HuntForWeapon&gt;</returns>
        List<HuntForWeapon> GetHuntForWeaponsForWipe (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Hunt for weapons list for the specific server in the specific wipe.
        /// </summary>
        /// <remarks>
        /// This returns a list of all the hunt for weapons items for the specific wipe and if any of them has been found and by who.. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="wipeId">The wipe id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;HuntForWeapon&gt;</returns>
        ApiResponse<List<HuntForWeapon>> GetHuntForWeaponsForWipeWithHttpInfo (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Leaderboard stats on specific server.
        /// </summary>
        /// <remarks>
        /// This returns a list of players on the leaderboard 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;LeaderBoardPlayer&gt;</returns>
        List<LeaderBoardPlayer> GetLeaderboards (int serverId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Leaderboard stats on specific server.
        /// </summary>
        /// <remarks>
        /// This returns a list of players on the leaderboard 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;LeaderBoardPlayer&gt;</returns>
        ApiResponse<List<LeaderBoardPlayer>> GetLeaderboardsWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Leaderboard stats on specific server in the specific wipe.
        /// </summary>
        /// <remarks>
        /// This returns a list of players on the leaderboard 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The wipe id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;LeaderBoardPlayer&gt;</returns>
        List<LeaderBoardPlayer> GetLeaderboardsForWipe (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Leaderboard stats on specific server in the specific wipe.
        /// </summary>
        /// <remarks>
        /// This returns a list of players on the leaderboard 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The wipe id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;LeaderBoardPlayer&gt;</returns>
        ApiResponse<List<LeaderBoardPlayer>> GetLeaderboardsForWipeWithHttpInfo (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Get basic server information
        /// </summary>
        /// <remarks>
        /// This returns basic information about a specific server 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the basic information about</param>
        /// <returns>Server</returns>
        Server GetServer (int serverId);

        /// <summary>
        /// Get basic server information
        /// </summary>
        /// <remarks>
        /// This returns basic information about a specific server 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the basic information about</param>
        /// <returns>ApiResponse of Server</returns>
        ApiResponse<Server> GetServerWithHttpInfo (int serverId);
        /// <summary>
        /// Kills on a server
        /// </summary>
        /// <remarks>
        /// This returns all the kills on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;CombatKill&gt;</returns>
        List<CombatKill> GetServerCombatKills (int serverId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Kills on a server
        /// </summary>
        /// <remarks>
        /// This returns all the kills on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;CombatKill&gt;</returns>
        ApiResponse<List<CombatKill>> GetServerCombatKillsWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Get all wipes from a server
        /// </summary>
        /// <remarks>
        /// This returns all the wipes on the server 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the wipes from</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;Wipe&gt;</returns>
        List<Wipe> GetServerWipes (int serverId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Get all wipes from a server
        /// </summary>
        /// <remarks>
        /// This returns all the wipes on the server 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the wipes from</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;Wipe&gt;</returns>
        ApiResponse<List<Wipe>> GetServerWipesWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Get all the servers
        /// </summary>
        /// <remarks>
        /// This returns basic information about all the servers 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Server&gt;</returns>
        List<Server> GetServers ();

        /// <summary>
        /// Get all the servers
        /// </summary>
        /// <remarks>
        /// This returns basic information about all the servers 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Server&gt;</returns>
        ApiResponse<List<Server>> GetServersWithHttpInfo ();
        /// <summary>
        /// A list of all titles on specific server.
        /// </summary>
        /// <remarks>
        /// This returns all the titles on a server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the titles for</param>
        /// <returns>List&lt;Title&gt;</returns>
        List<Title> GetTitlesFromServer (int serverId);

        /// <summary>
        /// A list of all titles on specific server.
        /// </summary>
        /// <remarks>
        /// This returns all the titles on a server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the titles for</param>
        /// <returns>ApiResponse of List&lt;Title&gt;</returns>
        ApiResponse<List<Title>> GetTitlesFromServerWithHttpInfo (int serverId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// A list of all groups with subgroups and achievements for a server
        /// </summary>
        /// <remarks>
        /// This returns the list of groups with subgroups and their achievements for a server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for.</param>
        /// <returns>Task of List&lt;AchievementGroup&gt;</returns>
        System.Threading.Tasks.Task<List<AchievementGroup>> GetAchievementGroupsOfServerAsync (int serverId);

        /// <summary>
        /// A list of all groups with subgroups and achievements for a server
        /// </summary>
        /// <remarks>
        /// This returns the list of groups with subgroups and their achievements for a server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for.</param>
        /// <returns>Task of ApiResponse (List&lt;AchievementGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AchievementGroup>>> GetAchievementGroupsOfServerAsyncWithHttpInfo (int serverId);
        /// <summary>
        /// A list of all achievements on specific server.
        /// </summary>
        /// <remarks>
        /// This returns all the achievements on a server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <returns>Task of List&lt;Achievement&gt;</returns>
        System.Threading.Tasks.Task<List<Achievement>> GetAchievementsOfServerAsync (int serverId);

        /// <summary>
        /// A list of all achievements on specific server.
        /// </summary>
        /// <remarks>
        /// This returns all the achievements on a server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <returns>Task of ApiResponse (List&lt;Achievement&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Achievement>>> GetAchievementsOfServerAsyncWithHttpInfo (int serverId);
        /// <summary>
        /// Kills on a server in a wipe
        /// </summary>
        /// <remarks>
        /// This returns all the kills on a specific server in the specific wipe
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;CombatKill&gt;</returns>
        System.Threading.Tasks.Task<List<CombatKill>> GetCombatKillsOnWipeAsync (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Kills on a server in a wipe
        /// </summary>
        /// <remarks>
        /// This returns all the kills on a specific server in the specific wipe
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CombatKill&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CombatKill>>> GetCombatKillsOnWipeAsyncWithHttpInfo (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Hunt for weapons list of the current wipe.
        /// </summary>
        /// <remarks>
        /// This returns a list of all the hunt for weapons items for this wipe and if any of them has been found and by who.. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;HuntForWeapon&gt;</returns>
        System.Threading.Tasks.Task<List<HuntForWeapon>> GetHuntForWeaponsForCurrentWipeAsync (int serverId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Hunt for weapons list of the current wipe.
        /// </summary>
        /// <remarks>
        /// This returns a list of all the hunt for weapons items for this wipe and if any of them has been found and by who.. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;HuntForWeapon&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HuntForWeapon>>> GetHuntForWeaponsForCurrentWipeAsyncWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Hunt for weapons list for the specific server in the specific wipe.
        /// </summary>
        /// <remarks>
        /// This returns a list of all the hunt for weapons items for the specific wipe and if any of them has been found and by who.. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="wipeId">The wipe id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;HuntForWeapon&gt;</returns>
        System.Threading.Tasks.Task<List<HuntForWeapon>> GetHuntForWeaponsForWipeAsync (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Hunt for weapons list for the specific server in the specific wipe.
        /// </summary>
        /// <remarks>
        /// This returns a list of all the hunt for weapons items for the specific wipe and if any of them has been found and by who.. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="wipeId">The wipe id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;HuntForWeapon&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HuntForWeapon>>> GetHuntForWeaponsForWipeAsyncWithHttpInfo (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Leaderboard stats on specific server.
        /// </summary>
        /// <remarks>
        /// This returns a list of players on the leaderboard 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;LeaderBoardPlayer&gt;</returns>
        System.Threading.Tasks.Task<List<LeaderBoardPlayer>> GetLeaderboardsAsync (int serverId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Leaderboard stats on specific server.
        /// </summary>
        /// <remarks>
        /// This returns a list of players on the leaderboard 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LeaderBoardPlayer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LeaderBoardPlayer>>> GetLeaderboardsAsyncWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Leaderboard stats on specific server in the specific wipe.
        /// </summary>
        /// <remarks>
        /// This returns a list of players on the leaderboard 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The wipe id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;LeaderBoardPlayer&gt;</returns>
        System.Threading.Tasks.Task<List<LeaderBoardPlayer>> GetLeaderboardsForWipeAsync (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Leaderboard stats on specific server in the specific wipe.
        /// </summary>
        /// <remarks>
        /// This returns a list of players on the leaderboard 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The wipe id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LeaderBoardPlayer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LeaderBoardPlayer>>> GetLeaderboardsForWipeAsyncWithHttpInfo (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Get basic server information
        /// </summary>
        /// <remarks>
        /// This returns basic information about a specific server 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the basic information about</param>
        /// <returns>Task of Server</returns>
        System.Threading.Tasks.Task<Server> GetServerAsync (int serverId);

        /// <summary>
        /// Get basic server information
        /// </summary>
        /// <remarks>
        /// This returns basic information about a specific server 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the basic information about</param>
        /// <returns>Task of ApiResponse (Server)</returns>
        System.Threading.Tasks.Task<ApiResponse<Server>> GetServerAsyncWithHttpInfo (int serverId);
        /// <summary>
        /// Kills on a server
        /// </summary>
        /// <remarks>
        /// This returns all the kills on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;CombatKill&gt;</returns>
        System.Threading.Tasks.Task<List<CombatKill>> GetServerCombatKillsAsync (int serverId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Kills on a server
        /// </summary>
        /// <remarks>
        /// This returns all the kills on a specific server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CombatKill&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CombatKill>>> GetServerCombatKillsAsyncWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Get all wipes from a server
        /// </summary>
        /// <remarks>
        /// This returns all the wipes on the server 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the wipes from</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;Wipe&gt;</returns>
        System.Threading.Tasks.Task<List<Wipe>> GetServerWipesAsync (int serverId, int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Get all wipes from a server
        /// </summary>
        /// <remarks>
        /// This returns all the wipes on the server 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the wipes from</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Wipe&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Wipe>>> GetServerWipesAsyncWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Get all the servers
        /// </summary>
        /// <remarks>
        /// This returns basic information about all the servers 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Server&gt;</returns>
        System.Threading.Tasks.Task<List<Server>> GetServersAsync ();

        /// <summary>
        /// Get all the servers
        /// </summary>
        /// <remarks>
        /// This returns basic information about all the servers 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Server&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Server>>> GetServersAsyncWithHttpInfo ();
        /// <summary>
        /// A list of all titles on specific server.
        /// </summary>
        /// <remarks>
        /// This returns all the titles on a server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the titles for</param>
        /// <returns>Task of List&lt;Title&gt;</returns>
        System.Threading.Tasks.Task<List<Title>> GetTitlesFromServerAsync (int serverId);

        /// <summary>
        /// A list of all titles on specific server.
        /// </summary>
        /// <remarks>
        /// This returns all the titles on a server
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the titles for</param>
        /// <returns>Task of ApiResponse (List&lt;Title&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Title>>> GetTitlesFromServerAsyncWithHttpInfo (int serverId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServerApi : IServerApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServerApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerApi"/> class
        /// </summary>
        /// <returns></returns>
        public ServerApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServerApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// A list of all groups with subgroups and achievements for a server This returns the list of groups with subgroups and their achievements for a server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for.</param>
        /// <returns>List&lt;AchievementGroup&gt;</returns>
        public List<AchievementGroup> GetAchievementGroupsOfServer (int serverId)
        {
             ApiResponse<List<AchievementGroup>> localVarResponse = GetAchievementGroupsOfServerWithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A list of all groups with subgroups and achievements for a server This returns the list of groups with subgroups and their achievements for a server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for.</param>
        /// <returns>ApiResponse of List&lt;AchievementGroup&gt;</returns>
        public ApiResponse<List<AchievementGroup>> GetAchievementGroupsOfServerWithHttpInfo (int serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetAchievementGroupsOfServer");

            var localVarPath = "/servers/{server_id}/achievements/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementGroupsOfServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AchievementGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AchievementGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AchievementGroup>)));
        }

        /// <summary>
        /// A list of all groups with subgroups and achievements for a server This returns the list of groups with subgroups and their achievements for a server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for.</param>
        /// <returns>Task of List&lt;AchievementGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<AchievementGroup>> GetAchievementGroupsOfServerAsync (int serverId)
        {
             ApiResponse<List<AchievementGroup>> localVarResponse = await GetAchievementGroupsOfServerAsyncWithHttpInfo(serverId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A list of all groups with subgroups and achievements for a server This returns the list of groups with subgroups and their achievements for a server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievement groups for.</param>
        /// <returns>Task of ApiResponse (List&lt;AchievementGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AchievementGroup>>> GetAchievementGroupsOfServerAsyncWithHttpInfo (int serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetAchievementGroupsOfServer");

            var localVarPath = "/servers/{server_id}/achievements/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementGroupsOfServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AchievementGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AchievementGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AchievementGroup>)));
        }

        /// <summary>
        /// A list of all achievements on specific server. This returns all the achievements on a server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <returns>List&lt;Achievement&gt;</returns>
        public List<Achievement> GetAchievementsOfServer (int serverId)
        {
             ApiResponse<List<Achievement>> localVarResponse = GetAchievementsOfServerWithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="serverId"></param>
        /// <param name="callback"></param>
        public void GetAchievementsOfServerWithHttpInfo(int serverId, Action<ApiResponse<List<Achievement>>> callback)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetAchievementsOfServer");

            var localVarPath = "/servers/{server_id}/achievements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            this.Configuration.ApiClient.CallApiWithCallback(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, (localVarResponse, handler) =>
                {
                    int localVarStatusCode = (int)localVarResponse.StatusCode;

                    if (ExceptionFactory != null)
                    {
                        Exception exception = ExceptionFactory("GetAchievementsOfServer", localVarResponse);
                        if (exception != null) throw exception;
                    }

                    var resp = new ApiResponse<List<Achievement>>(localVarStatusCode,
                        localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                        (List<Achievement>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Achievement>)));
                    callback(resp);
                });

        }
        /// <summary>
        /// A list of all achievements on specific server. This returns all the achievements on a server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <returns>ApiResponse of List&lt;Achievement&gt;</returns>
        public ApiResponse<List<Achievement>> GetAchievementsOfServerWithHttpInfo (int serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetAchievementsOfServer");

            var localVarPath = "/servers/{server_id}/achievements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementsOfServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Achievement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Achievement>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Achievement>)));
        }

        /// <summary>
        /// A list of all achievements on specific server. This returns all the achievements on a server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <returns>Task of List&lt;Achievement&gt;</returns>
        public async System.Threading.Tasks.Task<List<Achievement>> GetAchievementsOfServerAsync (int serverId)
        {
             ApiResponse<List<Achievement>> localVarResponse = await GetAchievementsOfServerAsyncWithHttpInfo(serverId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A list of all achievements on specific server. This returns all the achievements on a server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the achievements for</param>
        /// <returns>Task of ApiResponse (List&lt;Achievement&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Achievement>>> GetAchievementsOfServerAsyncWithHttpInfo (int serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetAchievementsOfServer");

            var localVarPath = "/servers/{server_id}/achievements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementsOfServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Achievement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Achievement>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Achievement>)));
        }

        /// <summary>
        /// Kills on a server in a wipe This returns all the kills on a specific server in the specific wipe
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;CombatKill&gt;</returns>
        public List<CombatKill> GetCombatKillsOnWipe (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<CombatKill>> localVarResponse = GetCombatKillsOnWipeWithHttpInfo(serverId, wipeId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Kills on a server in a wipe This returns all the kills on a specific server in the specific wipe
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;CombatKill&gt;</returns>
        public ApiResponse<List<CombatKill>> GetCombatKillsOnWipeWithHttpInfo (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetCombatKillsOnWipe");
            // verify the required parameter 'wipeId' is set
            if (wipeId == null)
                throw new ApiException(400, "Missing required parameter 'wipeId' when calling ServerApi->GetCombatKillsOnWipe");

            var localVarPath = "/servers/{server_id}/wipe/{wipe_id}/combatlog/kills";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (wipeId != null) localVarPathParams.Add("wipe_id", this.Configuration.ApiClient.ParameterToString(wipeId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCombatKillsOnWipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CombatKill>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CombatKill>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CombatKill>)));
        }

        /// <summary>
        /// Kills on a server in a wipe This returns all the kills on a specific server in the specific wipe
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;CombatKill&gt;</returns>
        public async System.Threading.Tasks.Task<List<CombatKill>> GetCombatKillsOnWipeAsync (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<CombatKill>> localVarResponse = await GetCombatKillsOnWipeAsyncWithHttpInfo(serverId, wipeId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Kills on a server in a wipe This returns all the kills on a specific server in the specific wipe
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="wipeId">The wipe id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CombatKill&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CombatKill>>> GetCombatKillsOnWipeAsyncWithHttpInfo (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetCombatKillsOnWipe");
            // verify the required parameter 'wipeId' is set
            if (wipeId == null)
                throw new ApiException(400, "Missing required parameter 'wipeId' when calling ServerApi->GetCombatKillsOnWipe");

            var localVarPath = "/servers/{server_id}/wipe/{wipe_id}/combatlog/kills";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (wipeId != null) localVarPathParams.Add("wipe_id", this.Configuration.ApiClient.ParameterToString(wipeId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCombatKillsOnWipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CombatKill>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CombatKill>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CombatKill>)));
        }

        /// <summary>
        /// Hunt for weapons list of the current wipe. This returns a list of all the hunt for weapons items for this wipe and if any of them has been found and by who.. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;HuntForWeapon&gt;</returns>
        public List<HuntForWeapon> GetHuntForWeaponsForCurrentWipe (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<HuntForWeapon>> localVarResponse = GetHuntForWeaponsForCurrentWipeWithHttpInfo(serverId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hunt for weapons list of the current wipe. This returns a list of all the hunt for weapons items for this wipe and if any of them has been found and by who.. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;HuntForWeapon&gt;</returns>
        public ApiResponse<List<HuntForWeapon>> GetHuntForWeaponsForCurrentWipeWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetHuntForWeaponsForCurrentWipe");

            var localVarPath = "/servers/{server_id}/huntforweapons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHuntForWeaponsForCurrentWipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HuntForWeapon>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<HuntForWeapon>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HuntForWeapon>)));
        }

        /// <summary>
        /// Hunt for weapons list of the current wipe. This returns a list of all the hunt for weapons items for this wipe and if any of them has been found and by who.. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;HuntForWeapon&gt;</returns>
        public async System.Threading.Tasks.Task<List<HuntForWeapon>> GetHuntForWeaponsForCurrentWipeAsync (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<HuntForWeapon>> localVarResponse = await GetHuntForWeaponsForCurrentWipeAsyncWithHttpInfo(serverId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hunt for weapons list of the current wipe. This returns a list of all the hunt for weapons items for this wipe and if any of them has been found and by who.. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;HuntForWeapon&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<HuntForWeapon>>> GetHuntForWeaponsForCurrentWipeAsyncWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetHuntForWeaponsForCurrentWipe");

            var localVarPath = "/servers/{server_id}/huntforweapons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHuntForWeaponsForCurrentWipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HuntForWeapon>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<HuntForWeapon>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HuntForWeapon>)));
        }

        /// <summary>
        /// Hunt for weapons list for the specific server in the specific wipe. This returns a list of all the hunt for weapons items for the specific wipe and if any of them has been found and by who.. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="wipeId">The wipe id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;HuntForWeapon&gt;</returns>
        public List<HuntForWeapon> GetHuntForWeaponsForWipe (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<HuntForWeapon>> localVarResponse = GetHuntForWeaponsForWipeWithHttpInfo(serverId, wipeId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hunt for weapons list for the specific server in the specific wipe. This returns a list of all the hunt for weapons items for the specific wipe and if any of them has been found and by who.. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="wipeId">The wipe id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;HuntForWeapon&gt;</returns>
        public ApiResponse<List<HuntForWeapon>> GetHuntForWeaponsForWipeWithHttpInfo (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetHuntForWeaponsForWipe");
            // verify the required parameter 'wipeId' is set
            if (wipeId == null)
                throw new ApiException(400, "Missing required parameter 'wipeId' when calling ServerApi->GetHuntForWeaponsForWipe");

            var localVarPath = "/servers/{server_id}/wipe/{wipe_id}/huntforweapons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (wipeId != null) localVarPathParams.Add("wipe_id", this.Configuration.ApiClient.ParameterToString(wipeId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHuntForWeaponsForWipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HuntForWeapon>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<HuntForWeapon>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HuntForWeapon>)));
        }

        /// <summary>
        /// Hunt for weapons list for the specific server in the specific wipe. This returns a list of all the hunt for weapons items for the specific wipe and if any of them has been found and by who.. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="wipeId">The wipe id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;HuntForWeapon&gt;</returns>
        public async System.Threading.Tasks.Task<List<HuntForWeapon>> GetHuntForWeaponsForWipeAsync (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<HuntForWeapon>> localVarResponse = await GetHuntForWeaponsForWipeAsyncWithHttpInfo(serverId, wipeId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hunt for weapons list for the specific server in the specific wipe. This returns a list of all the hunt for weapons items for the specific wipe and if any of them has been found and by who.. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the hunt for weapons for.</param>
        /// <param name="wipeId">The wipe id to retrieve the hunt for weapons for.</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;HuntForWeapon&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<HuntForWeapon>>> GetHuntForWeaponsForWipeAsyncWithHttpInfo (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetHuntForWeaponsForWipe");
            // verify the required parameter 'wipeId' is set
            if (wipeId == null)
                throw new ApiException(400, "Missing required parameter 'wipeId' when calling ServerApi->GetHuntForWeaponsForWipe");

            var localVarPath = "/servers/{server_id}/wipe/{wipe_id}/huntforweapons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (wipeId != null) localVarPathParams.Add("wipe_id", this.Configuration.ApiClient.ParameterToString(wipeId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHuntForWeaponsForWipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<HuntForWeapon>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<HuntForWeapon>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HuntForWeapon>)));
        }

        /// <summary>
        /// Leaderboard stats on specific server. This returns a list of players on the leaderboard 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;LeaderBoardPlayer&gt;</returns>
        public List<LeaderBoardPlayer> GetLeaderboards (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<LeaderBoardPlayer>> localVarResponse = GetLeaderboardsWithHttpInfo(serverId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Leaderboard stats on specific server. This returns a list of players on the leaderboard 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;LeaderBoardPlayer&gt;</returns>
        public ApiResponse<List<LeaderBoardPlayer>> GetLeaderboardsWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetLeaderboards");

            var localVarPath = "/servers/{server_id}/leaderboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LeaderBoardPlayer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LeaderBoardPlayer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LeaderBoardPlayer>)));
        }

        /// <summary>
        /// Leaderboard stats on specific server. This returns a list of players on the leaderboard 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;LeaderBoardPlayer&gt;</returns>
        public async System.Threading.Tasks.Task<List<LeaderBoardPlayer>> GetLeaderboardsAsync (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<LeaderBoardPlayer>> localVarResponse = await GetLeaderboardsAsyncWithHttpInfo(serverId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Leaderboard stats on specific server. This returns a list of players on the leaderboard 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LeaderBoardPlayer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LeaderBoardPlayer>>> GetLeaderboardsAsyncWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetLeaderboards");

            var localVarPath = "/servers/{server_id}/leaderboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LeaderBoardPlayer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LeaderBoardPlayer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LeaderBoardPlayer>)));
        }

        /// <summary>
        /// Leaderboard stats on specific server in the specific wipe. This returns a list of players on the leaderboard 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The wipe id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;LeaderBoardPlayer&gt;</returns>
        public List<LeaderBoardPlayer> GetLeaderboardsForWipe (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<LeaderBoardPlayer>> localVarResponse = GetLeaderboardsForWipeWithHttpInfo(serverId, wipeId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Leaderboard stats on specific server in the specific wipe. This returns a list of players on the leaderboard 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The wipe id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;LeaderBoardPlayer&gt;</returns>
        public ApiResponse<List<LeaderBoardPlayer>> GetLeaderboardsForWipeWithHttpInfo (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetLeaderboardsForWipe");
            // verify the required parameter 'wipeId' is set
            if (wipeId == null)
                throw new ApiException(400, "Missing required parameter 'wipeId' when calling ServerApi->GetLeaderboardsForWipe");

            var localVarPath = "/servers/{server_id}/wipe/{wipe_id}/leaderboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (wipeId != null) localVarPathParams.Add("wipe_id", this.Configuration.ApiClient.ParameterToString(wipeId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardsForWipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LeaderBoardPlayer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LeaderBoardPlayer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LeaderBoardPlayer>)));
        }

        /// <summary>
        /// Leaderboard stats on specific server in the specific wipe. This returns a list of players on the leaderboard 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The wipe id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;LeaderBoardPlayer&gt;</returns>
        public async System.Threading.Tasks.Task<List<LeaderBoardPlayer>> GetLeaderboardsForWipeAsync (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<LeaderBoardPlayer>> localVarResponse = await GetLeaderboardsForWipeAsyncWithHttpInfo(serverId, wipeId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Leaderboard stats on specific server in the specific wipe. This returns a list of players on the leaderboard 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the leaderboard for</param>
        /// <param name="wipeId">The wipe id to retrieve the leaderboard for</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LeaderBoardPlayer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LeaderBoardPlayer>>> GetLeaderboardsForWipeAsyncWithHttpInfo (int serverId, int wipeId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetLeaderboardsForWipe");
            // verify the required parameter 'wipeId' is set
            if (wipeId == null)
                throw new ApiException(400, "Missing required parameter 'wipeId' when calling ServerApi->GetLeaderboardsForWipe");

            var localVarPath = "/servers/{server_id}/wipe/{wipe_id}/leaderboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (wipeId != null) localVarPathParams.Add("wipe_id", this.Configuration.ApiClient.ParameterToString(wipeId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardsForWipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LeaderBoardPlayer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LeaderBoardPlayer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LeaderBoardPlayer>)));
        }

        /// <summary>
        /// Get basic server information This returns basic information about a specific server 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the basic information about</param>
        /// <returns>Server</returns>
        public Server GetServer (int serverId)
        {
             ApiResponse<Server> localVarResponse = GetServerWithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get basic server information This returns basic information about a specific server 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the basic information about</param>
        /// <returns>ApiResponse of Server</returns>
        public ApiResponse<Server> GetServerWithHttpInfo (int serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetServer");

            var localVarPath = "/servers/{server_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Server>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Server) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Server)));
        }

        /// <summary>
        /// Get basic server information This returns basic information about a specific server 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the basic information about</param>
        /// <returns>Task of Server</returns>
        public async System.Threading.Tasks.Task<Server> GetServerAsync (int serverId)
        {
             ApiResponse<Server> localVarResponse = await GetServerAsyncWithHttpInfo(serverId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get basic server information This returns basic information about a specific server 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the basic information about</param>
        /// <returns>Task of ApiResponse (Server)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Server>> GetServerAsyncWithHttpInfo (int serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetServer");

            var localVarPath = "/servers/{server_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Server>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Server) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Server)));
        }

        /// <summary>
        /// Kills on a server This returns all the kills on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;CombatKill&gt;</returns>
        public List<CombatKill> GetServerCombatKills (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<CombatKill>> localVarResponse = GetServerCombatKillsWithHttpInfo(serverId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Kills on a server This returns all the kills on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;CombatKill&gt;</returns>
        public ApiResponse<List<CombatKill>> GetServerCombatKillsWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetServerCombatKills");

            var localVarPath = "/servers/{server_id}/combatlog/kills";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServerCombatKills", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CombatKill>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CombatKill>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CombatKill>)));
        }

        /// <summary>
        /// Kills on a server This returns all the kills on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;CombatKill&gt;</returns>
        public async System.Threading.Tasks.Task<List<CombatKill>> GetServerCombatKillsAsync (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<CombatKill>> localVarResponse = await GetServerCombatKillsAsyncWithHttpInfo(serverId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Kills on a server This returns all the kills on a specific server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the kills on</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CombatKill&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CombatKill>>> GetServerCombatKillsAsyncWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetServerCombatKills");

            var localVarPath = "/servers/{server_id}/combatlog/kills";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServerCombatKills", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CombatKill>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CombatKill>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CombatKill>)));
        }

        /// <summary>
        /// Get all wipes from a server This returns all the wipes on the server 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the wipes from</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>List&lt;Wipe&gt;</returns>
        public List<Wipe> GetServerWipes (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<Wipe>> localVarResponse = GetServerWipesWithHttpInfo(serverId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all wipes from a server This returns all the wipes on the server 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the wipes from</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;Wipe&gt;</returns>
        public ApiResponse<List<Wipe>> GetServerWipesWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetServerWipes");

            var localVarPath = "/servers/{server_id}/wipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServerWipes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Wipe>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Wipe>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Wipe>)));
        }

        /// <summary>
        /// Get all wipes from a server This returns all the wipes on the server 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the wipes from</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of List&lt;Wipe&gt;</returns>
        public async System.Threading.Tasks.Task<List<Wipe>> GetServerWipesAsync (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<List<Wipe>> localVarResponse = await GetServerWipesAsyncWithHttpInfo(serverId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all wipes from a server This returns all the wipes on the server 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the wipes from</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set. (optional)</param>
        /// <param name="limit">The numbers of items to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Wipe&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Wipe>>> GetServerWipesAsyncWithHttpInfo (int serverId, int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetServerWipes");

            var localVarPath = "/servers/{server_id}/wipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServerWipes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Wipe>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Wipe>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Wipe>)));
        }

        /// <summary>
        /// Get all the servers This returns basic information about all the servers 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Server&gt;</returns>
        public List<Server> GetServers ()
        {
             ApiResponse<List<Server>> localVarResponse = GetServersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the servers This returns basic information about all the servers 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Server&gt;</returns>
        public ApiResponse<List<Server>> GetServersWithHttpInfo ()
        {

            var localVarPath = "/servers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Server>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Server>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Server>)));
        }

        /// <summary>
        /// Get all the servers This returns basic information about all the servers 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Server&gt;</returns>
        public async System.Threading.Tasks.Task<List<Server>> GetServersAsync ()
        {
             ApiResponse<List<Server>> localVarResponse = await GetServersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the servers This returns basic information about all the servers 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Server&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Server>>> GetServersAsyncWithHttpInfo ()
        {

            var localVarPath = "/servers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Server>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Server>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Server>)));
        }

        /// <summary>
        /// A list of all titles on specific server. This returns all the titles on a server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the titles for</param>
        /// <returns>List&lt;Title&gt;</returns>
        public List<Title> GetTitlesFromServer (int serverId)
        {
             ApiResponse<List<Title>> localVarResponse = GetTitlesFromServerWithHttpInfo(serverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="serverId"></param>
        /// <param name="callback"></param>
        public void GetTitlesFromServerWithHttpInfo(int serverId, Action<ApiResponse<List<Title>>> callback)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetTitlesFromServer");

            var localVarPath = "/servers/{server_id}/titles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            this.Configuration.ApiClient.CallApiWithCallback(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, (localVarResponse, handler) => {
                    int localVarStatusCode = (int)localVarResponse.StatusCode;

                    if (ExceptionFactory != null)
                    {
                        Exception exception = ExceptionFactory("GetTitlesFromServer", localVarResponse);
                        if (exception != null) throw exception;
                    }

                    var resp = new ApiResponse<List<Title>>(localVarStatusCode,
                        localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                        (List<Title>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Title>)));
                    callback(resp);
                });

        }

        /// <summary>
        /// A list of all titles on specific server. This returns all the titles on a server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the titles for</param>
        /// <returns>ApiResponse of List&lt;Title&gt;</returns>
        public ApiResponse<List<Title>> GetTitlesFromServerWithHttpInfo (int serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetTitlesFromServer");

            var localVarPath = "/servers/{server_id}/titles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTitlesFromServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Title>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Title>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Title>)));
        }

        /// <summary>
        /// A list of all titles on specific server. This returns all the titles on a server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the titles for</param>
        /// <returns>Task of List&lt;Title&gt;</returns>
        public async System.Threading.Tasks.Task<List<Title>> GetTitlesFromServerAsync (int serverId)
        {
             ApiResponse<List<Title>> localVarResponse = await GetTitlesFromServerAsyncWithHttpInfo(serverId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A list of all titles on specific server. This returns all the titles on a server
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverId">The server id to retrieve the titles for</param>
        /// <returns>Task of ApiResponse (List&lt;Title&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Title>>> GetTitlesFromServerAsyncWithHttpInfo (int serverId)
        {
            // verify the required parameter 'serverId' is set
            if (serverId == null)
                throw new ApiException(400, "Missing required parameter 'serverId' when calling ServerApi->GetTitlesFromServer");

            var localVarPath = "/servers/{server_id}/titles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverId != null) localVarPathParams.Add("server_id", this.Configuration.ApiClient.ParameterToString(serverId)); // path parameter

            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarHeaderParams["Bearer"] = this.Configuration.GetApiKeyWithPrefix("Bearer");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTitlesFromServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Title>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Title>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Title>)));
        }

    }
}

/* 
 * Blackhawk API
 *
 * Blackhawk API for the rust server
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jonas-lt@live.dk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Achievement
    /// </summary>
    [DataContract]
    public partial class Achievement :  IEquatable<Achievement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Achievement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Achievement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Achievement" /> class.
        /// </summary>
        /// <param name="achievementId">achievementId (required).</param>
        /// <param name="achievementTitle">achievementTitle (required).</param>
        /// <param name="achievementDesc">achievementDesc (required).</param>
        /// <param name="achievementPoint">achievementPoint (required).</param>
        /// <param name="relatedTitles">relatedTitles.</param>
        public Achievement(int achievementId = default(int), string achievementTitle = default(string), string achievementDesc = default(string), int achievementPoint = default(int), List<RelatedTitle> relatedTitles = default(List<RelatedTitle>))
        {
            // to ensure "achievementId" is required (not null)
            if (achievementId == null)
            {
                throw new InvalidDataException("achievementId is a required property for Achievement and cannot be null");
            }
            else
            {
                this.AchievementId = achievementId;
            }
            
            // to ensure "achievementTitle" is required (not null)
            if (achievementTitle == null)
            {
                throw new InvalidDataException("achievementTitle is a required property for Achievement and cannot be null");
            }
            else
            {
                this.AchievementTitle = achievementTitle;
            }
            
            // to ensure "achievementDesc" is required (not null)
            if (achievementDesc == null)
            {
                throw new InvalidDataException("achievementDesc is a required property for Achievement and cannot be null");
            }
            else
            {
                this.AchievementDesc = achievementDesc;
            }
            
            // to ensure "achievementPoint" is required (not null)
            if (achievementPoint == null)
            {
                throw new InvalidDataException("achievementPoint is a required property for Achievement and cannot be null");
            }
            else
            {
                this.AchievementPoint = achievementPoint;
            }
            
            this.RelatedTitles = relatedTitles;
        }
        
        /// <summary>
        /// Gets or Sets AchievementId
        /// </summary>
        [DataMember(Name="achievement_id", EmitDefaultValue=true)]
        public int AchievementId { get; set; }

        /// <summary>
        /// Gets or Sets AchievementTitle
        /// </summary>
        [DataMember(Name="achievement_title", EmitDefaultValue=true)]
        public string AchievementTitle { get; set; }

        /// <summary>
        /// Gets or Sets AchievementDesc
        /// </summary>
        [DataMember(Name="achievement_desc", EmitDefaultValue=true)]
        public string AchievementDesc { get; set; }

        /// <summary>
        /// Gets or Sets AchievementPoint
        /// </summary>
        [DataMember(Name="achievement_point", EmitDefaultValue=true)]
        public int AchievementPoint { get; set; }

        /// <summary>
        /// Gets or Sets RelatedTitles
        /// </summary>
        [DataMember(Name="related_titles", EmitDefaultValue=false)]
        public List<RelatedTitle> RelatedTitles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Achievement {\n");
            sb.Append("  AchievementId: ").Append(AchievementId).Append("\n");
            sb.Append("  AchievementTitle: ").Append(AchievementTitle).Append("\n");
            sb.Append("  AchievementDesc: ").Append(AchievementDesc).Append("\n");
            sb.Append("  AchievementPoint: ").Append(AchievementPoint).Append("\n");
            sb.Append("  RelatedTitles: ").Append(RelatedTitles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Achievement);
        }

        /// <summary>
        /// Returns true if Achievement instances are equal
        /// </summary>
        /// <param name="input">Instance of Achievement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Achievement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AchievementId == input.AchievementId ||
                    (this.AchievementId != null &&
                    this.AchievementId.Equals(input.AchievementId))
                ) && 
                (
                    this.AchievementTitle == input.AchievementTitle ||
                    (this.AchievementTitle != null &&
                    this.AchievementTitle.Equals(input.AchievementTitle))
                ) && 
                (
                    this.AchievementDesc == input.AchievementDesc ||
                    (this.AchievementDesc != null &&
                    this.AchievementDesc.Equals(input.AchievementDesc))
                ) && 
                (
                    this.AchievementPoint == input.AchievementPoint ||
                    (this.AchievementPoint != null &&
                    this.AchievementPoint.Equals(input.AchievementPoint))
                ) && 
                (
                    this.RelatedTitles == input.RelatedTitles ||
                    this.RelatedTitles != null &&
                    input.RelatedTitles != null &&
                    this.RelatedTitles.SequenceEqual(input.RelatedTitles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AchievementId != null)
                    hashCode = hashCode * 59 + this.AchievementId.GetHashCode();
                if (this.AchievementTitle != null)
                    hashCode = hashCode * 59 + this.AchievementTitle.GetHashCode();
                if (this.AchievementDesc != null)
                    hashCode = hashCode * 59 + this.AchievementDesc.GetHashCode();
                if (this.AchievementPoint != null)
                    hashCode = hashCode * 59 + this.AchievementPoint.GetHashCode();
                if (this.RelatedTitles != null)
                    hashCode = hashCode * 59 + this.RelatedTitles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Blackhawk API
 *
 * Blackhawk API for the rust server
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jonas-lt@live.dk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PlayerAchievement
    /// </summary>
    [DataContract]
    public partial class PlayerAchievement :  IEquatable<PlayerAchievement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerAchievement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlayerAchievement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerAchievement" /> class.
        /// </summary>
        /// <param name="receiveDate">receiveDate (required).</param>
        /// <param name="achievement">achievement (required).</param>
        public PlayerAchievement(DateTime receiveDate = default(DateTime), Achievement achievement = default(Achievement))
        {
            // to ensure "receiveDate" is required (not null)
            if (receiveDate == null)
            {
                throw new InvalidDataException("receiveDate is a required property for PlayerAchievement and cannot be null");
            }
            else
            {
                this.ReceiveDate = receiveDate;
            }
            
            // to ensure "achievement" is required (not null)
            if (achievement == null)
            {
                throw new InvalidDataException("achievement is a required property for PlayerAchievement and cannot be null");
            }
            else
            {
                this.Achievement = achievement;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets ReceiveDate
        /// </summary>
        [DataMember(Name="receive_date", EmitDefaultValue=true)]
        public DateTime ReceiveDate { get; set; }

        /// <summary>
        /// Gets or Sets Achievement
        /// </summary>
        [DataMember(Name="achievement", EmitDefaultValue=true)]
        public Achievement Achievement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerAchievement {\n");
            sb.Append("  ReceiveDate: ").Append(ReceiveDate).Append("\n");
            sb.Append("  Achievement: ").Append(Achievement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlayerAchievement);
        }

        /// <summary>
        /// Returns true if PlayerAchievement instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayerAchievement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerAchievement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReceiveDate == input.ReceiveDate ||
                    (this.ReceiveDate != null &&
                    this.ReceiveDate.Equals(input.ReceiveDate))
                ) && 
                (
                    this.Achievement == input.Achievement ||
                    (this.Achievement != null &&
                    this.Achievement.Equals(input.Achievement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReceiveDate != null)
                    hashCode = hashCode * 59 + this.ReceiveDate.GetHashCode();
                if (this.Achievement != null)
                    hashCode = hashCode * 59 + this.Achievement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

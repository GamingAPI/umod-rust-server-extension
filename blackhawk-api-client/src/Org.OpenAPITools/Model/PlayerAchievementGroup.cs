/* 
 * Blackhawk API
 *
 * Blackhawk API for the rust server
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jonas-lt@live.dk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PlayerAchievementGroup
    /// </summary>
    [DataContract]
    public partial class PlayerAchievementGroup :  IEquatable<PlayerAchievementGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerAchievementGroup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlayerAchievementGroup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerAchievementGroup" /> class.
        /// </summary>
        /// <param name="groupId">groupId (required).</param>
        /// <param name="subGroups">subGroups (required).</param>
        /// <param name="achievements">achievements (required).</param>
        /// <param name="achievementsCompletedCount">achievementsCompletedCount (required).</param>
        /// <param name="achievementPoints">achievementPoints (required).</param>
        public PlayerAchievementGroup(int groupId = default(int), List<PlayerAchievementGroup> subGroups = default(List<PlayerAchievementGroup>), List<PlayerAchievement> achievements = default(List<PlayerAchievement>), int achievementsCompletedCount = default(int), int achievementPoints = default(int))
        {
            // to ensure "groupId" is required (not null)
            if (groupId == null)
            {
                throw new InvalidDataException("groupId is a required property for PlayerAchievementGroup and cannot be null");
            }
            else
            {
                this.GroupId = groupId;
            }
            
            // to ensure "subGroups" is required (not null)
            if (subGroups == null)
            {
                throw new InvalidDataException("subGroups is a required property for PlayerAchievementGroup and cannot be null");
            }
            else
            {
                this.SubGroups = subGroups;
            }
            
            // to ensure "achievements" is required (not null)
            if (achievements == null)
            {
                throw new InvalidDataException("achievements is a required property for PlayerAchievementGroup and cannot be null");
            }
            else
            {
                this.Achievements = achievements;
            }
            
            // to ensure "achievementsCompletedCount" is required (not null)
            if (achievementsCompletedCount == null)
            {
                throw new InvalidDataException("achievementsCompletedCount is a required property for PlayerAchievementGroup and cannot be null");
            }
            else
            {
                this.AchievementsCompletedCount = achievementsCompletedCount;
            }
            
            // to ensure "achievementPoints" is required (not null)
            if (achievementPoints == null)
            {
                throw new InvalidDataException("achievementPoints is a required property for PlayerAchievementGroup and cannot be null");
            }
            else
            {
                this.AchievementPoints = achievementPoints;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name="group_id", EmitDefaultValue=true)]
        public int GroupId { get; set; }

        /// <summary>
        /// Gets or Sets SubGroups
        /// </summary>
        [DataMember(Name="sub_groups", EmitDefaultValue=true)]
        public List<PlayerAchievementGroup> SubGroups { get; set; }

        /// <summary>
        /// Gets or Sets Achievements
        /// </summary>
        [DataMember(Name="achievements", EmitDefaultValue=true)]
        public List<PlayerAchievement> Achievements { get; set; }

        /// <summary>
        /// Gets or Sets AchievementsCompletedCount
        /// </summary>
        [DataMember(Name="achievements_completed_count", EmitDefaultValue=true)]
        public int AchievementsCompletedCount { get; set; }

        /// <summary>
        /// Gets or Sets AchievementPoints
        /// </summary>
        [DataMember(Name="achievement_points", EmitDefaultValue=true)]
        public int AchievementPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerAchievementGroup {\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  SubGroups: ").Append(SubGroups).Append("\n");
            sb.Append("  Achievements: ").Append(Achievements).Append("\n");
            sb.Append("  AchievementsCompletedCount: ").Append(AchievementsCompletedCount).Append("\n");
            sb.Append("  AchievementPoints: ").Append(AchievementPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlayerAchievementGroup);
        }

        /// <summary>
        /// Returns true if PlayerAchievementGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayerAchievementGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerAchievementGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.SubGroups == input.SubGroups ||
                    this.SubGroups != null &&
                    input.SubGroups != null &&
                    this.SubGroups.SequenceEqual(input.SubGroups)
                ) && 
                (
                    this.Achievements == input.Achievements ||
                    this.Achievements != null &&
                    input.Achievements != null &&
                    this.Achievements.SequenceEqual(input.Achievements)
                ) && 
                (
                    this.AchievementsCompletedCount == input.AchievementsCompletedCount ||
                    (this.AchievementsCompletedCount != null &&
                    this.AchievementsCompletedCount.Equals(input.AchievementsCompletedCount))
                ) && 
                (
                    this.AchievementPoints == input.AchievementPoints ||
                    (this.AchievementPoints != null &&
                    this.AchievementPoints.Equals(input.AchievementPoints))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.SubGroups != null)
                    hashCode = hashCode * 59 + this.SubGroups.GetHashCode();
                if (this.Achievements != null)
                    hashCode = hashCode * 59 + this.Achievements.GetHashCode();
                if (this.AchievementsCompletedCount != null)
                    hashCode = hashCode * 59 + this.AchievementsCompletedCount.GetHashCode();
                if (this.AchievementPoints != null)
                    hashCode = hashCode * 59 + this.AchievementPoints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

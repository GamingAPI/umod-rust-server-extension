/* 
 * Blackhawk API
 *
 * Blackhawk API for the rust server
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jonas-lt@live.dk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RelatedTitle
    /// </summary>
    [DataContract]
    public partial class RelatedTitle :  IEquatable<RelatedTitle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelatedTitle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RelatedTitle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RelatedTitle" /> class.
        /// </summary>
        /// <param name="titleId">titleId (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="requiredAchievements">requiredAchievements (required).</param>
        public RelatedTitle(int titleId = default(int), string title = default(string), List<int> requiredAchievements = default(List<int>))
        {
            // to ensure "titleId" is required (not null)
            if (titleId == null)
            {
                throw new InvalidDataException("titleId is a required property for RelatedTitle and cannot be null");
            }
            else
            {
                this.TitleId = titleId;
            }
            
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for RelatedTitle and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            
            // to ensure "requiredAchievements" is required (not null)
            if (requiredAchievements == null)
            {
                throw new InvalidDataException("requiredAchievements is a required property for RelatedTitle and cannot be null");
            }
            else
            {
                this.RequiredAchievements = requiredAchievements;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets TitleId
        /// </summary>
        [DataMember(Name="title_id", EmitDefaultValue=true)]
        public int TitleId { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets RequiredAchievements
        /// </summary>
        [DataMember(Name="required_achievements", EmitDefaultValue=true)]
        public List<int> RequiredAchievements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RelatedTitle {\n");
            sb.Append("  TitleId: ").Append(TitleId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  RequiredAchievements: ").Append(RequiredAchievements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelatedTitle);
        }

        /// <summary>
        /// Returns true if RelatedTitle instances are equal
        /// </summary>
        /// <param name="input">Instance of RelatedTitle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelatedTitle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TitleId == input.TitleId ||
                    (this.TitleId != null &&
                    this.TitleId.Equals(input.TitleId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.RequiredAchievements == input.RequiredAchievements ||
                    this.RequiredAchievements != null &&
                    input.RequiredAchievements != null &&
                    this.RequiredAchievements.SequenceEqual(input.RequiredAchievements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TitleId != null)
                    hashCode = hashCode * 59 + this.TitleId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.RequiredAchievements != null)
                    hashCode = hashCode * 59 + this.RequiredAchievements.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
